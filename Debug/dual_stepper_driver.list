
dual_stepper_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007278  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007410  08007410  00008410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007470  08007470  00009104  2**0
                  CONTENTS
  4 .ARM          00000008  08007470  08007470  00008470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007478  08007478  00009104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007478  08007478  00008478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800747c  0800747c  0000847c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08007480  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d18  20000104  08007584  00009104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e1c  08007584  00009e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001105f  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000305f  00000000  00000000  0001a193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a49  00000000  00000000  0001dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018749  00000000  00000000  0001e9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013041  00000000  00000000  0003713a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c3b  00000000  00000000  0004a17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3db6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  000d3dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d7508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080073f8 	.word	0x080073f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	080073f8 	.word	0x080073f8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	4b38      	ldr	r3, [pc, #224]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a37      	ldr	r2, [pc, #220]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b35      	ldr	r3, [pc, #212]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	4b31      	ldr	r3, [pc, #196]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a30      	ldr	r2, [pc, #192]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b2e      	ldr	r3, [pc, #184]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a29      	ldr	r2, [pc, #164]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b27      	ldr	r3, [pc, #156]	@ (80005c4 <MX_GPIO_Init+0xfc>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_B_Pin|MS2_B_Pin|STEP_B_Pin|DIR_B_Pin
 8000532:	2200      	movs	r2, #0
 8000534:	f24a 01f0 	movw	r1, #41200	@ 0xa0f0
 8000538:	4823      	ldr	r0, [pc, #140]	@ (80005c8 <MX_GPIO_Init+0x100>)
 800053a:	f000 fd83 	bl	8001044 <HAL_GPIO_WritePin>
                          |SWDIO_Pin|STEP_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STDBY_B_Pin|SPREAD_B_Pin|UART_SEL_Pin|DIAG_A_OUT_Pin
 800053e:	2200      	movs	r2, #0
 8000540:	f24b 11db 	movw	r1, #45531	@ 0xb1db
 8000544:	4821      	ldr	r0, [pc, #132]	@ (80005cc <MX_GPIO_Init+0x104>)
 8000546:	f000 fd7d 	bl	8001044 <HAL_GPIO_WritePin>
                          |DIAG_B_OUT_Pin|MS1_A_Pin|MS2_A_Pin|DIR_A_Pin
                          |STDBY_A_Pin|SPREAD_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_B_Pin|MS2_B_Pin|STEP_B_Pin|DIR_B_Pin
 800054a:	f24a 03f0 	movw	r3, #41200	@ 0xa0f0
 800054e:	60fb      	str	r3, [r7, #12]
                          |SWDIO_Pin|STEP_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4619      	mov	r1, r3
 8000562:	4819      	ldr	r0, [pc, #100]	@ (80005c8 <MX_GPIO_Init+0x100>)
 8000564:	f000 fbea 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STDBY_B_Pin|SPREAD_B_Pin|UART_SEL_Pin|DIAG_A_OUT_Pin
 8000568:	f24b 13db 	movw	r3, #45531	@ 0xb1db
 800056c:	60fb      	str	r3, [r7, #12]
                          |DIAG_B_OUT_Pin|MS1_A_Pin|MS2_A_Pin|DIR_A_Pin
                          |STDBY_A_Pin|SPREAD_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	4812      	ldr	r0, [pc, #72]	@ (80005cc <MX_GPIO_Init+0x104>)
 8000582:	f000 fbdb 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INDEX_B_Pin|DIAG_B_IN_Pin|INDEX_A_Pin|DIAG_A_IN_Pin;
 8000586:	f240 6324 	movw	r3, #1572	@ 0x624
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	4619      	mov	r1, r3
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <MX_GPIO_Init+0x104>)
 800059c:	f000 fbce 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWCLK_Pin;
 80005a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SWCLK_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <MX_GPIO_Init+0x100>)
 80005b6:	f000 fbc1 	bl	8000d3c <HAL_GPIO_Init>

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020400 	.word	0x40020400

080005d0 <USB_RXCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_RXCallback(uint8_t *buf, uint32_t *len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	memcpy(usbRxBuf, buf, *len);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	4807      	ldr	r0, [pc, #28]	@ (8000600 <USB_RXCallback+0x30>)
 80005e4:	f006 fefa 	bl	80073dc <memcpy>
	usbRxBufLen = *len;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <USB_RXCallback+0x34>)
 80005f0:	801a      	strh	r2, [r3, #0]
	usbRxFlag = 1;
 80005f2:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <USB_RXCallback+0x38>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000120 	.word	0x20000120
 8000604:	200001a0 	.word	0x200001a0
 8000608:	200001a2 	.word	0x200001a2

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 f9ec 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f80a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f7ff ff56 	bl	80004c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f8ec 	bl	80007f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000620:	f000 f914 	bl	800084c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000624:	f006 f970 	bl	8006908 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x1c>

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fea2 	bl	8007384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a28      	ldr	r2, [pc, #160]	@ (80006fc <SystemClock_Config+0xd0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <SystemClock_Config+0xd4>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000688:	2303      	movs	r3, #3
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	2310      	movs	r3, #16
 8000698:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006a4:	230c      	movs	r3, #12
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006a8:	23c0      	movs	r3, #192	@ 0xc0
 80006aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 ff2f 	bl	800251c <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c4:	f000 f81e 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f992 	bl	8002a0c <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f809 	bl	8000704 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	@ (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000724:	6453      	str	r3, [r2, #68]	@ 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	@ 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <NMI_Handler+0x4>

08000768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <MemManage_Handler+0x4>

08000778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <UsageFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b6:	f000 f96b 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c4:	4802      	ldr	r0, [pc, #8]	@ (80007d0 <OTG_FS_IRQHandler+0x10>)
 80007c6:	f000 fd9a 	bl	80012fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20001718 	.word	0x20001718

080007d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <MX_USART1_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000830:	f002 facc 	bl	8002dcc <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f7ff ff63 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200001a4 	.word	0x200001a4
 8000848:	40011000 	.word	0x40011000

0800084c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_USART2_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USART2_UART_Init+0x4c>)
 8000884:	f002 faa2 	bl	8002dcc <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f7ff ff39 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001ec 	.word	0x200001ec
 800089c:	40004400 	.word	0x40004400

080008a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	@ 0x30
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a32      	ldr	r2, [pc, #200]	@ (8000988 <HAL_UART_MspInit+0xe8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12d      	bne.n	800091e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	4b31      	ldr	r3, [pc, #196]	@ (800098c <HAL_UART_MspInit+0xec>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	4a30      	ldr	r2, [pc, #192]	@ (800098c <HAL_UART_MspInit+0xec>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d2:	4b2e      	ldr	r3, [pc, #184]	@ (800098c <HAL_UART_MspInit+0xec>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <HAL_UART_MspInit+0xec>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a29      	ldr	r2, [pc, #164]	@ (800098c <HAL_UART_MspInit+0xec>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b27      	ldr	r3, [pc, #156]	@ (800098c <HAL_UART_MspInit+0xec>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800090c:	2307      	movs	r3, #7
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	481e      	ldr	r0, [pc, #120]	@ (8000990 <HAL_UART_MspInit+0xf0>)
 8000918:	f000 fa10 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800091c:	e030      	b.n	8000980 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <HAL_UART_MspInit+0xf4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d12b      	bne.n	8000980 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <HAL_UART_MspInit+0xec>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a16      	ldr	r2, [pc, #88]	@ (800098c <HAL_UART_MspInit+0xec>)
 8000932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <HAL_UART_MspInit+0xec>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_UART_MspInit+0xec>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_UART_MspInit+0xec>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6313      	str	r3, [r2, #48]	@ 0x30
 8000954:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_UART_MspInit+0xec>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000960:	230c      	movs	r3, #12
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000970:	2307      	movs	r3, #7
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <HAL_UART_MspInit+0xf0>)
 800097c:	f000 f9de 	bl	8000d3c <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3730      	adds	r7, #48	@ 0x30
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40011000 	.word	0x40011000
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000
 8000994:	40004400 	.word	0x40004400

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800099c:	f7ff ff1a 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	@ (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	@ (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f006 fce5 	bl	8007394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fe1f 	bl	800060c <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80009dc:	08007480 	.word	0x08007480
  ldr r2, =_sbss
 80009e0:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80009e4:	20001e1c 	.word	0x20001e1c

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <HAL_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_Init+0x40>)
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <HAL_Init+0x40>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f94f 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff fe76 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f967 	bl	8000d22 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f92f 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000234 	.word	0x20000234

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000234 	.word	0x20000234

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	@ (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	@ (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	@ 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff29 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff3e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff31 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffa2 	bl	8000c74 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e159      	b.n	800100c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8148 	bne.w	8001006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d005      	beq.n	8000d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d130      	bne.n	8000df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80a2 	beq.w	8001006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b57      	ldr	r3, [pc, #348]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a56      	ldr	r2, [pc, #344]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b54      	ldr	r3, [pc, #336]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a52      	ldr	r2, [pc, #328]	@ (8001028 <HAL_GPIO_Init+0x2ec>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a49      	ldr	r2, [pc, #292]	@ (800102c <HAL_GPIO_Init+0x2f0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x202>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a48      	ldr	r2, [pc, #288]	@ (8001030 <HAL_GPIO_Init+0x2f4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x1fe>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a47      	ldr	r2, [pc, #284]	@ (8001034 <HAL_GPIO_Init+0x2f8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x1fa>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a46      	ldr	r2, [pc, #280]	@ (8001038 <HAL_GPIO_Init+0x2fc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x1f6>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a45      	ldr	r2, [pc, #276]	@ (800103c <HAL_GPIO_Init+0x300>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x1f2>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f50:	4935      	ldr	r1, [pc, #212]	@ (8001028 <HAL_GPIO_Init+0x2ec>)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f82:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fac:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001000:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	f67f aea2 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40013800 	.word	0x40013800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40013c00 	.word	0x40013c00

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af02      	add	r7, sp, #8
 800107c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e101      	b.n	800128c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d106      	bne.n	80010a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f005 fe64 	bl	8006d70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2203      	movs	r2, #3
 80010ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010b6:	d102      	bne.n	80010be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fa5d 	bl	8003582 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7c1a      	ldrb	r2, [r3, #16]
 80010d0:	f88d 2000 	strb.w	r2, [sp]
 80010d4:	3304      	adds	r3, #4
 80010d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d8:	f002 f93c 	bl	8003354 <USB_CoreInit>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2202      	movs	r2, #2
 80010e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0ce      	b.n	800128c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fa55 	bl	80035a4 <USB_SetCurrentMode>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2202      	movs	r2, #2
 8001104:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0bf      	b.n	800128c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e04a      	b.n	80011a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3315      	adds	r3, #21
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3314      	adds	r3, #20
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	b298      	uxth	r0, r3
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	332e      	adds	r3, #46	@ 0x2e
 800114e:	4602      	mov	r2, r0
 8001150:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3318      	adds	r3, #24
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	331c      	adds	r3, #28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	3320      	adds	r3, #32
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3324      	adds	r3, #36	@ 0x24
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	3301      	adds	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d3af      	bcc.n	8001112 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e044      	b.n	8001242 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	3301      	adds	r3, #1
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	429a      	cmp	r2, r3
 800124a:	d3b5      	bcc.n	80011b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7c1a      	ldrb	r2, [r3, #16]
 8001254:	f88d 2000 	strb.w	r2, [sp]
 8001258:	3304      	adds	r3, #4
 800125a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125c:	f002 f9ee 	bl	800363c <USB_DevInit>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2202      	movs	r2, #2
 800126a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00c      	b.n	800128c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fa38 	bl	80046fa <USB_DevDisconnect>

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_PCD_Start+0x1c>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e022      	b.n	80012f6 <HAL_PCD_Start+0x62>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f93f 	bl	8003560 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 f9e6 	bl	80046b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012fe:	b590      	push	{r4, r7, lr}
 8001300:	b08d      	sub	sp, #52	@ 0x34
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f003 faa4 	bl	8004862 <USB_GetMode>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 848c 	bne.w	8001c3a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fa08 	bl	800473c <USB_ReadInterrupts>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8482 	beq.w	8001c38 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 f9f5 	bl	800473c <USB_ReadInterrupts>
 8001352:	4603      	mov	r3, r0
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b02      	cmp	r3, #2
 800135a:	d107      	bne.n	800136c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f002 0202 	and.w	r2, r2, #2
 800136a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f003 f9e3 	bl	800473c <USB_ReadInterrupts>
 8001376:	4603      	mov	r3, r0
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	2b10      	cmp	r3, #16
 800137e:	d161      	bne.n	8001444 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0210 	bic.w	r2, r2, #16
 800138e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	f003 020f 	and.w	r2, r3, #15
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	3304      	adds	r3, #4
 80013ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	0c5b      	lsrs	r3, r3, #17
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d124      	bne.n	8001406 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d035      	beq.n	8001434 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	6a38      	ldr	r0, [r7, #32]
 80013dc:	f003 f81a 	bl	8004414 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ec:	441a      	add	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013fe:	441a      	add	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	e016      	b.n	8001434 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	0c5b      	lsrs	r3, r3, #17
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	2b06      	cmp	r3, #6
 8001410:	d110      	bne.n	8001434 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001418:	2208      	movs	r2, #8
 800141a:	4619      	mov	r1, r3
 800141c:	6a38      	ldr	r0, [r7, #32]
 800141e:	f002 fff9 	bl	8004414 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142e:	441a      	add	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0210 	orr.w	r2, r2, #16
 8001442:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f003 f977 	bl	800473c <USB_ReadInterrupts>
 800144e:	4603      	mov	r3, r0
 8001450:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001454:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001458:	f040 80a7 	bne.w	80015aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f003 f97c 	bl	8004762 <USB_ReadDevAllOutEpInterrupt>
 800146a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800146c:	e099      	b.n	80015a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800146e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 808e 	beq.w	8001596 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f003 f9a0 	bl	80047ca <USB_ReadDevOutEPInterrupt>
 800148a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00c      	beq.n	80014b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014a2:	461a      	mov	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fea4 	bl	80021f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00c      	beq.n	80014d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	015a      	lsls	r2, r3, #5
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014c6:	461a      	mov	r2, r3
 80014c8:	2308      	movs	r3, #8
 80014ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 ff7a 	bl	80023c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	015a      	lsls	r2, r3, #5
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014ea:	461a      	mov	r2, r3
 80014ec:	2310      	movs	r3, #16
 80014ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d030      	beq.n	800155c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001502:	2b80      	cmp	r3, #128	@ 0x80
 8001504:	d109      	bne.n	800151a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001514:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001518:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800151a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	3304      	adds	r3, #4
 800152e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	78db      	ldrb	r3, [r3, #3]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d108      	bne.n	800154a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2200      	movs	r2, #0
 800153c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f005 fd0f 	bl	8006f68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	015a      	lsls	r2, r3, #5
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001556:	461a      	mov	r2, r3
 8001558:	2302      	movs	r3, #2
 800155a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001572:	461a      	mov	r2, r3
 8001574:	2320      	movs	r3, #32
 8001576:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800158e:	461a      	mov	r2, r3
 8001590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001594:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	3301      	adds	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800159c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f47f af62 	bne.w	800146e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 f8c4 	bl	800473c <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015be:	f040 80db 	bne.w	8001778 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 f8e5 	bl	8004796 <USB_ReadDevAllInEpInterrupt>
 80015cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015d2:	e0cd      	b.n	8001770 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80c2 	beq.w	8001764 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 f90b 	bl	8004806 <USB_ReadDevInEPInterrupt>
 80015f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d057      	beq.n	80016ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	2201      	movs	r2, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	69f9      	ldr	r1, [r7, #28]
 8001618:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800161c:	4013      	ands	r3, r2
 800161e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800162c:	461a      	mov	r2, r3
 800162e:	2301      	movs	r3, #1
 8001630:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	799b      	ldrb	r3, [r3, #6]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d132      	bne.n	80016a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3320      	adds	r3, #32
 800164a:	6819      	ldr	r1, [r3, #0]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4403      	add	r3, r0
 800165a:	331c      	adds	r3, #28
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4419      	add	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4403      	add	r3, r0
 800166e:	3320      	adds	r3, #32
 8001670:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	2b00      	cmp	r3, #0
 8001676:	d113      	bne.n	80016a0 <HAL_PCD_IRQHandler+0x3a2>
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	3324      	adds	r3, #36	@ 0x24
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001698:	461a      	mov	r2, r3
 800169a:	2101      	movs	r1, #1
 800169c:	f003 f912 	bl	80048c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f005 fbe3 	bl	8006e72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016c2:	461a      	mov	r2, r3
 80016c4:	2308      	movs	r3, #8
 80016c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016de:	461a      	mov	r2, r3
 80016e0:	2310      	movs	r3, #16
 80016e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016fa:	461a      	mov	r2, r3
 80016fc:	2340      	movs	r3, #64	@ 0x40
 80016fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d023      	beq.n	8001752 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800170a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800170c:	6a38      	ldr	r0, [r7, #32]
 800170e:	f002 f8f9 	bl	8003904 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	3310      	adds	r3, #16
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	3304      	adds	r3, #4
 8001724:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	78db      	ldrb	r3, [r3, #3]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2200      	movs	r2, #0
 8001732:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f005 fc26 	bl	8006f8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	015a      	lsls	r2, r3, #5
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	4413      	add	r3, r2
 8001748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800174c:	461a      	mov	r2, r3
 800174e:	2302      	movs	r3, #2
 8001750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800175c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fcbd 	bl	80020de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	3301      	adds	r3, #1
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800176a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001772:	2b00      	cmp	r3, #0
 8001774:	f47f af2e 	bne.w	80015d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f002 ffdd 	bl	800473c <USB_ReadInterrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800178c:	d122      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fea4 	bl	8002504 <HAL_PCDEx_LPM_Callback>
 80017bc:	e002      	b.n	80017c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f005 fbc4 	bl	8006f4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 ffaf 	bl	800473c <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017e8:	d112      	bne.n	8001810 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d102      	bne.n	8001800 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f005 fb80 	bl	8006f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800180e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f002 ff91 	bl	800473c <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001824:	f040 80b7 	bne.w	8001996 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2110      	movs	r1, #16
 8001842:	4618      	mov	r0, r3
 8001844:	f002 f85e 	bl	8003904 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800184c:	e046      	b.n	80018dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800184e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001850:	015a      	lsls	r2, r3, #5
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800185a:	461a      	mov	r2, r3
 800185c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001860:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001872:	0151      	lsls	r1, r2, #5
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	440a      	add	r2, r1
 8001878:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800187c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001880:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800188e:	461a      	mov	r2, r3
 8001890:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001894:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a6:	0151      	lsls	r1, r2, #5
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	440a      	add	r2, r1
 80018ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c6:	0151      	lsls	r1, r2, #5
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	440a      	add	r2, r1
 80018cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d8:	3301      	adds	r3, #1
 80018da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	461a      	mov	r2, r3
 80018e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d3b2      	bcc.n	800184e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018f6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7bdb      	ldrb	r3, [r3, #15]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d016      	beq.n	8001932 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001914:	f043 030b 	orr.w	r3, r3, #11
 8001918:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800192a:	f043 030b 	orr.w	r3, r3, #11
 800192e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001930:	e015      	b.n	800195e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001940:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001944:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001948:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001958:	f043 030b 	orr.w	r3, r3, #11
 800195c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800196c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001970:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001980:	461a      	mov	r2, r3
 8001982:	f002 ff9f 	bl	80048c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fece 	bl	800473c <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019aa:	d123      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 ff64 	bl	800487e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 f81b 	bl	80039f6 <USB_GetDevSpeed>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681c      	ldr	r4, [r3, #0]
 80019cc:	f001 f9ca 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 80019d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019d6:	461a      	mov	r2, r3
 80019d8:	4620      	mov	r0, r4
 80019da:	f001 fd1f 	bl	800341c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f005 fa6f 	bl	8006ec2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 fe9f 	bl	800473c <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d10a      	bne.n	8001a1e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f005 fa4c 	bl	8006ea6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f002 0208 	and.w	r2, r2, #8
 8001a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fe8a 	bl	800473c <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2e:	2b80      	cmp	r3, #128	@ 0x80
 8001a30:	d123      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a3e:	2301      	movs	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a42:	e014      	b.n	8001a6e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4619      	mov	r1, r3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fb0a 	bl	800207c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	791b      	ldrb	r3, [r3, #4]
 8001a72:	461a      	mov	r2, r3
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d3e4      	bcc.n	8001a44 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fe5c 	bl	800473c <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a8e:	d13c      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a90:	2301      	movs	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a94:	e02b      	b.n	8001aee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	015a      	lsls	r2, r3, #5
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3318      	adds	r3, #24
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d115      	bne.n	8001ae8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001abc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da12      	bge.n	8001ae8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	3317      	adds	r3, #23
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 faca 	bl	800207c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	3301      	adds	r3, #1
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	791b      	ldrb	r3, [r3, #4]
 8001af2:	461a      	mov	r2, r3
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d3cd      	bcc.n	8001a96 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fe14 	bl	800473c <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b1e:	d156      	bne.n	8001bce <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b20:	2301      	movs	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b24:	e045      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	015a      	lsls	r2, r3, #5
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d12e      	bne.n	8001bac <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da2b      	bge.n	8001bac <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d121      	bne.n	8001bac <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10a      	bne.n	8001bac <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba8:	6053      	str	r3, [r2, #4]
            break;
 8001baa:	e008      	b.n	8001bbe <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	3301      	adds	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	791b      	ldrb	r3, [r3, #4]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d3b3      	bcc.n	8001b26 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fdb2 	bl	800473c <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be2:	d10a      	bne.n	8001bfa <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f005 f9e3 	bl	8006fb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fd9c 	bl	800473c <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d115      	bne.n	8001c3a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f005 f9d3 	bl	8006fcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	e000      	b.n	8001c3a <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c38:	bf00      	nop
    }
  }
}
 8001c3a:	3734      	adds	r7, #52	@ 0x34
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_SetAddress+0x1a>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e012      	b.n	8001c80 <HAL_PCD_SetAddress+0x40>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fcfb 	bl	800466c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	4608      	mov	r0, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	70fb      	strb	r3, [r7, #3]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	803b      	strh	r3, [r7, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	da0f      	bge.n	8001cce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 020f 	and.w	r2, r3, #15
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	3310      	adds	r3, #16
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	705a      	strb	r2, [r3, #1]
 8001ccc:	e00f      	b.n	8001cee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 020f 	and.w	r2, r3, #15
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001cfa:	883b      	ldrh	r3, [r7, #0]
 8001cfc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	78ba      	ldrb	r2, [r7, #2]
 8001d08:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	785b      	ldrb	r3, [r3, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d1c:	78bb      	ldrb	r3, [r7, #2]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d102      	bne.n	8001d28 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_PCD_EP_Open+0xae>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e00e      	b.n	8001d54 <HAL_PCD_EP_Open+0xcc>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 fe7b 	bl	8003a40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d52:	7afb      	ldrb	r3, [r7, #11]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	da0f      	bge.n	8001d90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	3310      	adds	r3, #16
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	705a      	strb	r2, [r3, #1]
 8001d8e:	e00f      	b.n	8001db0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 020f 	and.w	r2, r3, #15
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	3304      	adds	r3, #4
 8001da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_PCD_EP_Close+0x6e>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e00e      	b.n	8001de8 <HAL_PCD_EP_Close+0x8c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 feb9 	bl	8003b50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	799b      	ldrb	r3, [r3, #6]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	799b      	ldrb	r3, [r3, #6]
 8001e54:	461a      	mov	r2, r3
 8001e56:	6979      	ldr	r1, [r7, #20]
 8001e58:	f001 ff56 	bl	8003d08 <USB_EPStartXfer>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 020f 	and.w	r2, r3, #15
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e88:	681b      	ldr	r3, [r3, #0]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 020f 	and.w	r2, r3, #15
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	3310      	adds	r3, #16
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	3304      	adds	r3, #4
 8001ebc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	799b      	ldrb	r3, [r3, #6]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	799b      	ldrb	r3, [r3, #6]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6979      	ldr	r1, [r7, #20]
 8001efc:	f001 ff04 	bl	8003d08 <USB_EPStartXfer>

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	7912      	ldrb	r2, [r2, #4]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e04f      	b.n	8001fc8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da0f      	bge.n	8001f50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 020f 	and.w	r2, r3, #15
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3310      	adds	r3, #16
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	705a      	strb	r2, [r3, #1]
 8001f4e:	e00d      	b.n	8001f6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	3304      	adds	r3, #4
 8001f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_PCD_EP_SetStall+0x82>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e01d      	b.n	8001fc8 <HAL_PCD_EP_SetStall+0xbe>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fa92 	bl	80044c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7999      	ldrb	r1, [r3, #6]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f002 fc83 	bl	80048c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	7912      	ldrb	r2, [r2, #4]
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e042      	b.n	8002074 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da0f      	bge.n	8002016 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 020f 	and.w	r2, r3, #15
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	3310      	adds	r3, #16
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	705a      	strb	r2, [r3, #1]
 8002014:	e00f      	b.n	8002036 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	f003 020f 	and.w	r2, r3, #15
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_PCD_EP_ClrStall+0x86>
 8002052:	2302      	movs	r3, #2
 8002054:	e00e      	b.n	8002074 <HAL_PCD_EP_ClrStall+0xa4>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68f9      	ldr	r1, [r7, #12]
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fa9b 	bl	80045a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	da0c      	bge.n	80020aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	f003 020f 	and.w	r2, r3, #15
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	3310      	adds	r3, #16
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	3304      	adds	r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e00c      	b.n	80020c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 020f 	and.w	r2, r3, #15
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68f9      	ldr	r1, [r7, #12]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 f8ba 	bl	8004244 <USB_EPStopXfer>
 80020d0:	4603      	mov	r3, r0
 80020d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020d4:	7afb      	ldrb	r3, [r7, #11]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b08a      	sub	sp, #40	@ 0x28
 80020e2:	af02      	add	r7, sp, #8
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3310      	adds	r3, #16
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	429a      	cmp	r2, r3
 8002110:	d901      	bls.n	8002116 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06b      	b.n	80021ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	429a      	cmp	r2, r3
 800212a:	d902      	bls.n	8002132 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3303      	adds	r3, #3
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213a:	e02a      	b.n	8002192 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	429a      	cmp	r2, r3
 8002150:	d902      	bls.n	8002158 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	3303      	adds	r3, #3
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68d9      	ldr	r1, [r3, #12]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	4603      	mov	r3, r0
 8002174:	6978      	ldr	r0, [r7, #20]
 8002176:	f002 f90f 	bl	8004398 <USB_WritePacket>

    ep->xfer_buff  += len;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	441a      	add	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	441a      	add	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d809      	bhi.n	80021bc <PCD_WriteEmptyTxFifo+0xde>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d203      	bcs.n	80021bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1bf      	bne.n	800213c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d811      	bhi.n	80021ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	2201      	movs	r2, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	6939      	ldr	r1, [r7, #16]
 80021e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021e8:	4013      	ands	r3, r2
 80021ea:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	333c      	adds	r3, #60	@ 0x3c
 8002210:	3304      	adds	r3, #4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	799b      	ldrb	r3, [r3, #6]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d17b      	bne.n	8002326 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d015      	beq.n	8002264 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	4a61      	ldr	r2, [pc, #388]	@ (80023c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	f240 80b9 	bls.w	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80b3 	beq.w	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800225a:	461a      	mov	r2, r3
 800225c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002260:	6093      	str	r3, [r2, #8]
 8002262:	e0a7      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800227a:	461a      	mov	r2, r3
 800227c:	2320      	movs	r3, #32
 800227e:	6093      	str	r3, [r2, #8]
 8002280:	e098      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 8093 	bne.w	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	4a4b      	ldr	r2, [pc, #300]	@ (80023c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d90f      	bls.n	80022b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ac:	461a      	mov	r2, r3
 80022ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	e07e      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	3304      	adds	r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	0159      	lsls	r1, r3, #5
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d114      	bne.n	8002318 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002300:	461a      	mov	r2, r3
 8002302:	2101      	movs	r1, #1
 8002304:	f002 fade 	bl	80048c4 <USB_EP0_OutStart>
 8002308:	e006      	b.n	8002318 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f004 fd8c 	bl	8006e3c <HAL_PCD_DataOutStageCallback>
 8002324:	e046      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	4a26      	ldr	r2, [pc, #152]	@ (80023c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d124      	bne.n	8002378 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002344:	461a      	mov	r2, r3
 8002346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800234a:	6093      	str	r3, [r2, #8]
 800234c:	e032      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002364:	461a      	mov	r2, r3
 8002366:	2320      	movs	r3, #32
 8002368:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f004 fd63 	bl	8006e3c <HAL_PCD_DataOutStageCallback>
 8002376:	e01d      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d114      	bne.n	80023a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d108      	bne.n	80023a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023a0:	461a      	mov	r2, r3
 80023a2:	2100      	movs	r1, #0
 80023a4:	f002 fa8e 	bl	80048c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f004 fd44 	bl	8006e3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	4f54300a 	.word	0x4f54300a
 80023c4:	4f54310a 	.word	0x4f54310a

080023c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	333c      	adds	r3, #60	@ 0x3c
 80023e0:	3304      	adds	r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4a15      	ldr	r2, [pc, #84]	@ (8002450 <PCD_EP_OutSetupPacket_int+0x88>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d90e      	bls.n	800241c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002414:	461a      	mov	r2, r3
 8002416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800241a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f004 fcfb 	bl	8006e18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <PCD_EP_OutSetupPacket_int+0x88>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d90c      	bls.n	8002444 <PCD_EP_OutSetupPacket_int+0x7c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	799b      	ldrb	r3, [r3, #6]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800243c:	461a      	mov	r2, r3
 800243e:	2101      	movs	r1, #1
 8002440:	f002 fa40 	bl	80048c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	4f54300a 	.word	0x4f54300a

08002454 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
 8002460:	4613      	mov	r3, r2
 8002462:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002472:	883b      	ldrh	r3, [r7, #0]
 8002474:	0419      	lsls	r1, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	430a      	orrs	r2, r1
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002480:	e028      	b.n	80024d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4413      	add	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e00d      	b.n	80024b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	3340      	adds	r3, #64	@ 0x40
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	4413      	add	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	3301      	adds	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d3ec      	bcc.n	8002496 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024bc:	883b      	ldrh	r3, [r7, #0]
 80024be:	0418      	lsls	r0, r3, #16
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6819      	ldr	r1, [r3, #0]
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	4302      	orrs	r2, r0
 80024cc:	3340      	adds	r3, #64	@ 0x40
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e267      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d075      	beq.n	8002626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253a:	4b88      	ldr	r3, [pc, #544]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d00c      	beq.n	8002560 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002546:	4b85      	ldr	r3, [pc, #532]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800254e:	2b08      	cmp	r3, #8
 8002550:	d112      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002552:	4b82      	ldr	r3, [pc, #520]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800255e:	d10b      	bne.n	8002578 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	4b7e      	ldr	r3, [pc, #504]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05b      	beq.n	8002624 <HAL_RCC_OscConfig+0x108>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d157      	bne.n	8002624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e242      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x74>
 8002582:	4b76      	ldr	r3, [pc, #472]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x98>
 800259a:	4b70      	ldr	r3, [pc, #448]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6f      	ldr	r2, [pc, #444]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b6d      	ldr	r3, [pc, #436]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6c      	ldr	r2, [pc, #432]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xb0>
 80025b4:	4b69      	ldr	r3, [pc, #420]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a68      	ldr	r2, [pc, #416]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a65      	ldr	r2, [pc, #404]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fa70 	bl	8000ab8 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fa6c 	bl	8000ab8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e207      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b5b      	ldr	r3, [pc, #364]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xc0>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fa5c 	bl	8000ab8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fa58 	bl	8000ab8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	@ 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1f3      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	4b51      	ldr	r3, [pc, #324]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0xe8>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002632:	4b4a      	ldr	r3, [pc, #296]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263e:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002646:	2b08      	cmp	r3, #8
 8002648:	d11c      	bne.n	8002684 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b44      	ldr	r3, [pc, #272]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d116      	bne.n	8002684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	4b41      	ldr	r3, [pc, #260]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x152>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e1c7      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4937      	ldr	r1, [pc, #220]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	e03a      	b.n	80026fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268c:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <HAL_RCC_OscConfig+0x244>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fa11 	bl	8000ab8 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe fa0d 	bl	8000ab8 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1a8      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b8:	4b28      	ldr	r3, [pc, #160]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4925      	ldr	r1, [pc, #148]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ce:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <HAL_RCC_OscConfig+0x244>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe f9f0 	bl	8000ab8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7fe f9ec 	bl	8000ab8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e187      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d036      	beq.n	8002774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <HAL_RCC_OscConfig+0x248>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe f9d0 	bl	8000ab8 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe f9cc 	bl	8000ab8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e167      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_OscConfig+0x240>)
 8002730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x200>
 800273a:	e01b      	b.n	8002774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273c:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCC_OscConfig+0x248>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7fe f9b9 	bl	8000ab8 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	e00e      	b.n	8002768 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe f9b5 	bl	8000ab8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d907      	bls.n	8002768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e150      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	42470000 	.word	0x42470000
 8002764:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b88      	ldr	r3, [pc, #544]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800276a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ea      	bne.n	800274a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8097 	beq.w	80028b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b81      	ldr	r3, [pc, #516]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b7d      	ldr	r3, [pc, #500]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	4a7c      	ldr	r2, [pc, #496]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a2:	4b7a      	ldr	r3, [pc, #488]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b77      	ldr	r3, [pc, #476]	@ (8002990 <HAL_RCC_OscConfig+0x474>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027be:	4b74      	ldr	r3, [pc, #464]	@ (8002990 <HAL_RCC_OscConfig+0x474>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a73      	ldr	r2, [pc, #460]	@ (8002990 <HAL_RCC_OscConfig+0x474>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7fe f975 	bl	8000ab8 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fe f971 	bl	8000ab8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e10c      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002990 <HAL_RCC_OscConfig+0x474>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x2ea>
 80027f8:	4b64      	ldr	r3, [pc, #400]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a63      	ldr	r2, [pc, #396]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
 8002804:	e01c      	b.n	8002840 <HAL_RCC_OscConfig+0x324>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b05      	cmp	r3, #5
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x30c>
 800280e:	4b5f      	ldr	r3, [pc, #380]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002812:	4a5e      	ldr	r2, [pc, #376]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	6713      	str	r3, [r2, #112]	@ 0x70
 800281a:	4b5c      	ldr	r3, [pc, #368]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a5b      	ldr	r2, [pc, #364]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x324>
 8002828:	4b58      	ldr	r3, [pc, #352]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a57      	ldr	r2, [pc, #348]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	4b55      	ldr	r3, [pc, #340]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a54      	ldr	r2, [pc, #336]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 0304 	bic.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe f936 	bl	8000ab8 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	e00a      	b.n	8002866 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7fe f932 	bl	8000ab8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0cb      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	4b49      	ldr	r3, [pc, #292]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ee      	beq.n	8002850 <HAL_RCC_OscConfig+0x334>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe f920 	bl	8000ab8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe f91c 	bl	8000ab8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0b5      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002892:	4b3e      	ldr	r3, [pc, #248]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ee      	bne.n	800287c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b39      	ldr	r3, [pc, #228]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	4a38      	ldr	r2, [pc, #224]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a1 	beq.w	80029fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ba:	4b34      	ldr	r3, [pc, #208]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d05c      	beq.n	8002980 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d141      	bne.n	8002952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <HAL_RCC_OscConfig+0x478>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe f8f0 	bl	8000ab8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe f8ec 	bl	8000ab8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e087      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b27      	ldr	r3, [pc, #156]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	491b      	ldr	r1, [pc, #108]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <HAL_RCC_OscConfig+0x478>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe f8c5 	bl	8000ab8 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe f8c1 	bl	8000ab8 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e05c      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x416>
 8002950:	e054      	b.n	80029fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <HAL_RCC_OscConfig+0x478>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe f8ae 	bl	8000ab8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe f8aa 	bl	8000ab8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e045      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_OscConfig+0x470>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x444>
 800297e:	e03d      	b.n	80029fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e038      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000
 8002994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x4ec>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d028      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d121      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d11a      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029c8:	4013      	ands	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	3b01      	subs	r3, #1
 80029e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0cc      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a20:	4b68      	ldr	r3, [pc, #416]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d90c      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b63      	ldr	r3, [pc, #396]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b8      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a60:	4b59      	ldr	r3, [pc, #356]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a58      	ldr	r2, [pc, #352]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a78:	4b53      	ldr	r3, [pc, #332]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a84:	4b50      	ldr	r3, [pc, #320]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	494d      	ldr	r1, [pc, #308]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d044      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b47      	ldr	r3, [pc, #284]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d119      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e07f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e067      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b37      	ldr	r3, [pc, #220]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4934      	ldr	r1, [pc, #208]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fd ffdc 	bl	8000ab8 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fd ffd8 	bl	8000ab8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e04f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b25      	ldr	r3, [pc, #148]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d20c      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e032      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4916      	ldr	r1, [pc, #88]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	490e      	ldr	r1, [pc, #56]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b92:	f000 f821 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	490a      	ldr	r1, [pc, #40]	@ (8002bcc <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	4a09      	ldr	r2, [pc, #36]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd ff3c 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023c00 	.word	0x40023c00
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08007458 	.word	0x08007458
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b090      	sub	sp, #64	@ 0x40
 8002bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf0:	4b59      	ldr	r3, [pc, #356]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d00d      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	f200 80a1 	bhi.w	8002d44 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x34>
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0a:	e09b      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b53      	ldr	r3, [pc, #332]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c10:	e09b      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c12:	4b53      	ldr	r3, [pc, #332]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c16:	e098      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c18:	4b4f      	ldr	r3, [pc, #316]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c22:	4b4d      	ldr	r3, [pc, #308]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c40:	2100      	movs	r1, #0
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c44:	fb03 f201 	mul.w	r2, r3, r1
 8002c48:	2300      	movs	r3, #0
 8002c4a:	fb00 f303 	mul.w	r3, r0, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a43      	ldr	r2, [pc, #268]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c52:	fba0 1202 	umull	r1, r2, r0, r2
 8002c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c58:	460a      	mov	r2, r1
 8002c5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c5e:	4413      	add	r3, r2
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	2200      	movs	r2, #0
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	61fa      	str	r2, [r7, #28]
 8002c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c72:	f7fd fab1 	bl	80001d8 <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7e:	e053      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c80:	4b35      	ldr	r3, [pc, #212]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	2200      	movs	r2, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	617a      	str	r2, [r7, #20]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c92:	f04f 0b00 	mov.w	fp, #0
 8002c96:	4652      	mov	r2, sl
 8002c98:	465b      	mov	r3, fp
 8002c9a:	f04f 0000 	mov.w	r0, #0
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	0159      	lsls	r1, r3, #5
 8002ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca8:	0150      	lsls	r0, r2, #5
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	ebb2 080a 	subs.w	r8, r2, sl
 8002cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cca:	ebb2 0408 	subs.w	r4, r2, r8
 8002cce:	eb63 0509 	sbc.w	r5, r3, r9
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	00eb      	lsls	r3, r5, #3
 8002cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce0:	00e2      	lsls	r2, r4, #3
 8002ce2:	4614      	mov	r4, r2
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	eb14 030a 	adds.w	r3, r4, sl
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	eb45 030b 	adc.w	r3, r5, fp
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	028b      	lsls	r3, r1, #10
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d08:	4621      	mov	r1, r4
 8002d0a:	028a      	lsls	r2, r1, #10
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d12:	2200      	movs	r2, #0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	60fa      	str	r2, [r7, #12]
 8002d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d1c:	f7fd fa5c 	bl	80001d8 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d42:	e002      	b.n	8002d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3740      	adds	r7, #64	@ 0x40
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	016e3600 	.word	0x016e3600

08002d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000000 	.word	0x20000000

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	@ (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08007468 	.word	0x08007468

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da8:	f7ff ffdc 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0b5b      	lsrs	r3, r3, #13
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08007468 	.word	0x08007468

08002dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e042      	b.n	8002e64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fd54 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	@ 0x24
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f82b 	bl	8002e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e70:	b0c0      	sub	sp, #256	@ 0x100
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	ea40 0301 	orr.w	r3, r0, r1
 8002e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ec4:	f021 010c 	bic.w	r1, r1, #12
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	6999      	ldr	r1, [r3, #24]
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	ea40 0301 	orr.w	r3, r0, r1
 8002ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b8f      	ldr	r3, [pc, #572]	@ (8003138 <UART_SetConfig+0x2cc>)
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d005      	beq.n	8002f0c <UART_SetConfig+0xa0>
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b8d      	ldr	r3, [pc, #564]	@ (800313c <UART_SetConfig+0x2d0>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d104      	bne.n	8002f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f0c:	f7ff ff4a 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8002f10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f14:	e003      	b.n	8002f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f16:	f7ff ff31 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8002f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f28:	f040 810c 	bne.w	8003144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f30:	2200      	movs	r2, #0
 8002f32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f3e:	4622      	mov	r2, r4
 8002f40:	462b      	mov	r3, r5
 8002f42:	1891      	adds	r1, r2, r2
 8002f44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f46:	415b      	adcs	r3, r3
 8002f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f4e:	4621      	mov	r1, r4
 8002f50:	eb12 0801 	adds.w	r8, r2, r1
 8002f54:	4629      	mov	r1, r5
 8002f56:	eb43 0901 	adc.w	r9, r3, r1
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f6e:	4690      	mov	r8, r2
 8002f70:	4699      	mov	r9, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	eb18 0303 	adds.w	r3, r8, r3
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	eb49 0303 	adc.w	r3, r9, r3
 8002f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	18db      	adds	r3, r3, r3
 8002f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	eb42 0303 	adc.w	r3, r2, r3
 8002fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fb0:	f7fd f912 	bl	80001d8 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4b61      	ldr	r3, [pc, #388]	@ (8003140 <UART_SetConfig+0x2d4>)
 8002fba:	fba3 2302 	umull	r2, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	011c      	lsls	r4, r3, #4
 8002fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fea:	4649      	mov	r1, r9
 8002fec:	eb43 0b01 	adc.w	fp, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003004:	4692      	mov	sl, r2
 8003006:	469b      	mov	fp, r3
 8003008:	4643      	mov	r3, r8
 800300a:	eb1a 0303 	adds.w	r3, sl, r3
 800300e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003012:	464b      	mov	r3, r9
 8003014:	eb4b 0303 	adc.w	r3, fp, r3
 8003018:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003028:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800302c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003030:	460b      	mov	r3, r1
 8003032:	18db      	adds	r3, r3, r3
 8003034:	643b      	str	r3, [r7, #64]	@ 0x40
 8003036:	4613      	mov	r3, r2
 8003038:	eb42 0303 	adc.w	r3, r2, r3
 800303c:	647b      	str	r3, [r7, #68]	@ 0x44
 800303e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003046:	f7fd f8c7 	bl	80001d8 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4611      	mov	r1, r2
 8003050:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003052:	fba3 2301 	umull	r2, r3, r3, r1
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2264      	movs	r2, #100	@ 0x64
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	1acb      	subs	r3, r1, r3
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003066:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003068:	fba3 2302 	umull	r2, r3, r3, r2
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003074:	441c      	add	r4, r3
 8003076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003080:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003088:	4642      	mov	r2, r8
 800308a:	464b      	mov	r3, r9
 800308c:	1891      	adds	r1, r2, r2
 800308e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003090:	415b      	adcs	r3, r3
 8003092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003098:	4641      	mov	r1, r8
 800309a:	1851      	adds	r1, r2, r1
 800309c:	6339      	str	r1, [r7, #48]	@ 0x30
 800309e:	4649      	mov	r1, r9
 80030a0:	414b      	adcs	r3, r1
 80030a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030b0:	4659      	mov	r1, fp
 80030b2:	00cb      	lsls	r3, r1, #3
 80030b4:	4651      	mov	r1, sl
 80030b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ba:	4651      	mov	r1, sl
 80030bc:	00ca      	lsls	r2, r1, #3
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	4642      	mov	r2, r8
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030cc:	464b      	mov	r3, r9
 80030ce:	460a      	mov	r2, r1
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030ec:	460b      	mov	r3, r1
 80030ee:	18db      	adds	r3, r3, r3
 80030f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f2:	4613      	mov	r3, r2
 80030f4:	eb42 0303 	adc.w	r3, r2, r3
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003102:	f7fd f869 	bl	80001d8 <__aeabi_uldivmod>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <UART_SetConfig+0x2d4>)
 800310c:	fba3 1302 	umull	r1, r3, r3, r2
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	2164      	movs	r1, #100	@ 0x64
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	3332      	adds	r3, #50	@ 0x32
 800311e:	4a08      	ldr	r2, [pc, #32]	@ (8003140 <UART_SetConfig+0x2d4>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	f003 0207 	and.w	r2, r3, #7
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4422      	add	r2, r4
 8003132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003134:	e106      	b.n	8003344 <UART_SetConfig+0x4d8>
 8003136:	bf00      	nop
 8003138:	40011000 	.word	0x40011000
 800313c:	40011400 	.word	0x40011400
 8003140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800314e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003156:	4642      	mov	r2, r8
 8003158:	464b      	mov	r3, r9
 800315a:	1891      	adds	r1, r2, r2
 800315c:	6239      	str	r1, [r7, #32]
 800315e:	415b      	adcs	r3, r3
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
 8003162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003166:	4641      	mov	r1, r8
 8003168:	1854      	adds	r4, r2, r1
 800316a:	4649      	mov	r1, r9
 800316c:	eb43 0501 	adc.w	r5, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	00eb      	lsls	r3, r5, #3
 800317a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317e:	00e2      	lsls	r2, r4, #3
 8003180:	4614      	mov	r4, r2
 8003182:	461d      	mov	r5, r3
 8003184:	4643      	mov	r3, r8
 8003186:	18e3      	adds	r3, r4, r3
 8003188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800318c:	464b      	mov	r3, r9
 800318e:	eb45 0303 	adc.w	r3, r5, r3
 8003192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031b2:	4629      	mov	r1, r5
 80031b4:	008b      	lsls	r3, r1, #2
 80031b6:	4621      	mov	r1, r4
 80031b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031bc:	4621      	mov	r1, r4
 80031be:	008a      	lsls	r2, r1, #2
 80031c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031c4:	f7fd f808 	bl	80001d8 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4b60      	ldr	r3, [pc, #384]	@ (8003350 <UART_SetConfig+0x4e4>)
 80031ce:	fba3 2302 	umull	r2, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	011c      	lsls	r4, r3, #4
 80031d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	1891      	adds	r1, r2, r2
 80031ee:	61b9      	str	r1, [r7, #24]
 80031f0:	415b      	adcs	r3, r3
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f8:	4641      	mov	r1, r8
 80031fa:	1851      	adds	r1, r2, r1
 80031fc:	6139      	str	r1, [r7, #16]
 80031fe:	4649      	mov	r1, r9
 8003200:	414b      	adcs	r3, r1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003210:	4659      	mov	r1, fp
 8003212:	00cb      	lsls	r3, r1, #3
 8003214:	4651      	mov	r1, sl
 8003216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800321a:	4651      	mov	r1, sl
 800321c:	00ca      	lsls	r2, r1, #3
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	4603      	mov	r3, r0
 8003224:	4642      	mov	r2, r8
 8003226:	189b      	adds	r3, r3, r2
 8003228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800322c:	464b      	mov	r3, r9
 800322e:	460a      	mov	r2, r1
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003242:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003250:	4649      	mov	r1, r9
 8003252:	008b      	lsls	r3, r1, #2
 8003254:	4641      	mov	r1, r8
 8003256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800325a:	4641      	mov	r1, r8
 800325c:	008a      	lsls	r2, r1, #2
 800325e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003262:	f7fc ffb9 	bl	80001d8 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4611      	mov	r1, r2
 800326c:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <UART_SetConfig+0x4e4>)
 800326e:	fba3 2301 	umull	r2, r3, r3, r1
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2264      	movs	r2, #100	@ 0x64
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	1acb      	subs	r3, r1, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	@ 0x32
 8003280:	4a33      	ldr	r2, [pc, #204]	@ (8003350 <UART_SetConfig+0x4e4>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800328c:	441c      	add	r4, r3
 800328e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003292:	2200      	movs	r2, #0
 8003294:	673b      	str	r3, [r7, #112]	@ 0x70
 8003296:	677a      	str	r2, [r7, #116]	@ 0x74
 8003298:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	1891      	adds	r1, r2, r2
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	415b      	adcs	r3, r3
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ac:	4641      	mov	r1, r8
 80032ae:	1851      	adds	r1, r2, r1
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	4649      	mov	r1, r9
 80032b4:	414b      	adcs	r3, r1
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032c4:	4659      	mov	r1, fp
 80032c6:	00cb      	lsls	r3, r1, #3
 80032c8:	4651      	mov	r1, sl
 80032ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ce:	4651      	mov	r1, sl
 80032d0:	00ca      	lsls	r2, r1, #3
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	4642      	mov	r2, r8
 80032da:	189b      	adds	r3, r3, r2
 80032dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032de:	464b      	mov	r3, r9
 80032e0:	460a      	mov	r2, r1
 80032e2:	eb42 0303 	adc.w	r3, r2, r3
 80032e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80032f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003300:	4649      	mov	r1, r9
 8003302:	008b      	lsls	r3, r1, #2
 8003304:	4641      	mov	r1, r8
 8003306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800330a:	4641      	mov	r1, r8
 800330c:	008a      	lsls	r2, r1, #2
 800330e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003312:	f7fc ff61 	bl	80001d8 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <UART_SetConfig+0x4e4>)
 800331c:	fba3 1302 	umull	r1, r3, r3, r2
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	2164      	movs	r1, #100	@ 0x64
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	3332      	adds	r3, #50	@ 0x32
 800332e:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <UART_SetConfig+0x4e4>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4422      	add	r2, r4
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800334a:	46bd      	mov	sp, r7
 800334c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003350:	51eb851f 	.word	0x51eb851f

08003354 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003354:	b084      	sub	sp, #16
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	f107 001c 	add.w	r0, r7, #28
 8003362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003366:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800336a:	2b01      	cmp	r3, #1
 800336c:	d123      	bne.n	80033b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003372:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003396:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f001 fae8 	bl	8004980 <USB_CoreReset>
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e01b      	b.n	80033ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f001 fadc 	bl	8004980 <USB_CoreReset>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	639a      	str	r2, [r3, #56]	@ 0x38
 80033e0:	e005      	b.n	80033ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033ee:	7fbb      	ldrb	r3, [r7, #30]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d10b      	bne.n	800340c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f043 0206 	orr.w	r2, r3, #6
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003418:	b004      	add	sp, #16
 800341a:	4770      	bx	lr

0800341c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d165      	bne.n	80034fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a41      	ldr	r2, [pc, #260]	@ (8003538 <USB_SetTurnaroundTime+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d906      	bls.n	8003446 <USB_SetTurnaroundTime+0x2a>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4a40      	ldr	r2, [pc, #256]	@ (800353c <USB_SetTurnaroundTime+0x120>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d202      	bcs.n	8003446 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003440:	230f      	movs	r3, #15
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e062      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4a3c      	ldr	r2, [pc, #240]	@ (800353c <USB_SetTurnaroundTime+0x120>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d306      	bcc.n	800345c <USB_SetTurnaroundTime+0x40>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4a3b      	ldr	r2, [pc, #236]	@ (8003540 <USB_SetTurnaroundTime+0x124>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d202      	bcs.n	800345c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003456:	230e      	movs	r3, #14
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e057      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4a38      	ldr	r2, [pc, #224]	@ (8003540 <USB_SetTurnaroundTime+0x124>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d306      	bcc.n	8003472 <USB_SetTurnaroundTime+0x56>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4a37      	ldr	r2, [pc, #220]	@ (8003544 <USB_SetTurnaroundTime+0x128>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d202      	bcs.n	8003472 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800346c:	230d      	movs	r3, #13
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e04c      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4a33      	ldr	r2, [pc, #204]	@ (8003544 <USB_SetTurnaroundTime+0x128>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d306      	bcc.n	8003488 <USB_SetTurnaroundTime+0x6c>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4a32      	ldr	r2, [pc, #200]	@ (8003548 <USB_SetTurnaroundTime+0x12c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d802      	bhi.n	8003488 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003482:	230c      	movs	r3, #12
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e041      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4a2f      	ldr	r2, [pc, #188]	@ (8003548 <USB_SetTurnaroundTime+0x12c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d906      	bls.n	800349e <USB_SetTurnaroundTime+0x82>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4a2e      	ldr	r2, [pc, #184]	@ (800354c <USB_SetTurnaroundTime+0x130>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d802      	bhi.n	800349e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003498:	230b      	movs	r3, #11
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e036      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4a2a      	ldr	r2, [pc, #168]	@ (800354c <USB_SetTurnaroundTime+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d906      	bls.n	80034b4 <USB_SetTurnaroundTime+0x98>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4a29      	ldr	r2, [pc, #164]	@ (8003550 <USB_SetTurnaroundTime+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d802      	bhi.n	80034b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034ae:	230a      	movs	r3, #10
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e02b      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4a26      	ldr	r2, [pc, #152]	@ (8003550 <USB_SetTurnaroundTime+0x134>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d906      	bls.n	80034ca <USB_SetTurnaroundTime+0xae>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4a25      	ldr	r2, [pc, #148]	@ (8003554 <USB_SetTurnaroundTime+0x138>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d202      	bcs.n	80034ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034c4:	2309      	movs	r3, #9
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	e020      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4a21      	ldr	r2, [pc, #132]	@ (8003554 <USB_SetTurnaroundTime+0x138>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d306      	bcc.n	80034e0 <USB_SetTurnaroundTime+0xc4>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4a20      	ldr	r2, [pc, #128]	@ (8003558 <USB_SetTurnaroundTime+0x13c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d802      	bhi.n	80034e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034da:	2308      	movs	r3, #8
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e015      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <USB_SetTurnaroundTime+0x13c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d906      	bls.n	80034f6 <USB_SetTurnaroundTime+0xda>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <USB_SetTurnaroundTime+0x140>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d202      	bcs.n	80034f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034f0:	2307      	movs	r3, #7
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e00a      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034f6:	2306      	movs	r3, #6
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e007      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003502:	2309      	movs	r3, #9
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e001      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003508:	2309      	movs	r3, #9
 800350a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	029b      	lsls	r3, r3, #10
 8003520:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	00d8acbf 	.word	0x00d8acbf
 800353c:	00e4e1c0 	.word	0x00e4e1c0
 8003540:	00f42400 	.word	0x00f42400
 8003544:	01067380 	.word	0x01067380
 8003548:	011a499f 	.word	0x011a499f
 800354c:	01312cff 	.word	0x01312cff
 8003550:	014ca43f 	.word	0x014ca43f
 8003554:	016e3600 	.word	0x016e3600
 8003558:	01a6ab1f 	.word	0x01a6ab1f
 800355c:	01e84800 	.word	0x01e84800

08003560 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0201 	bic.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d115      	bne.n	80035f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80035d2:	200a      	movs	r0, #10
 80035d4:	f7fd fa7c 	bl	8000ad0 <HAL_Delay>
      ms += 10U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	330a      	adds	r3, #10
 80035dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 f93f 	bl	8004862 <USB_GetMode>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d01e      	beq.n	8003628 <USB_SetCurrentMode+0x84>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80035ee:	d9f0      	bls.n	80035d2 <USB_SetCurrentMode+0x2e>
 80035f0:	e01a      	b.n	8003628 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d115      	bne.n	8003624 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003604:	200a      	movs	r0, #10
 8003606:	f7fd fa63 	bl	8000ad0 <HAL_Delay>
      ms += 10U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	330a      	adds	r3, #10
 800360e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 f926 	bl	8004862 <USB_GetMode>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <USB_SetCurrentMode+0x84>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003620:	d9f0      	bls.n	8003604 <USB_SetCurrentMode+0x60>
 8003622:	e001      	b.n	8003628 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e005      	b.n	8003634 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2bc8      	cmp	r3, #200	@ 0xc8
 800362c:	d101      	bne.n	8003632 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800363c:	b084      	sub	sp, #16
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800364a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e009      	b.n	8003670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3340      	adds	r3, #64	@ 0x40
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	2200      	movs	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3301      	adds	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b0e      	cmp	r3, #14
 8003674:	d9f2      	bls.n	800365c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003676:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11c      	bne.n	80036b8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003696:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80036b6:	e00b      	b.n	80036d0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80036d6:	461a      	mov	r2, r3
 80036d8:	2300      	movs	r3, #0
 80036da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10d      	bne.n	8003700 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036ec:	2100      	movs	r1, #0
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f968 	bl	80039c4 <USB_SetDevSpeed>
 80036f4:	e008      	b.n	8003708 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036f6:	2101      	movs	r1, #1
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f963 	bl	80039c4 <USB_SetDevSpeed>
 80036fe:	e003      	b.n	8003708 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003700:	2103      	movs	r1, #3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f95e 	bl	80039c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003708:	2110      	movs	r1, #16
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8fa 	bl	8003904 <USB_FlushTxFifo>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f924 	bl	8003968 <USB_FlushRxFifo>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003730:	461a      	mov	r2, r3
 8003732:	2300      	movs	r3, #0
 8003734:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800373c:	461a      	mov	r2, r3
 800373e:	2300      	movs	r3, #0
 8003740:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003748:	461a      	mov	r2, r3
 800374a:	2300      	movs	r3, #0
 800374c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e043      	b.n	80037dc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800376a:	d118      	bne.n	800379e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800377e:	461a      	mov	r2, r3
 8003780:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e013      	b.n	80037b0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e008      	b.n	80037b0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037aa:	461a      	mov	r2, r3
 80037ac:	2300      	movs	r3, #0
 80037ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037bc:	461a      	mov	r2, r3
 80037be:	2300      	movs	r3, #0
 80037c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ce:	461a      	mov	r2, r3
 80037d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3301      	adds	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80037e0:	461a      	mov	r2, r3
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d3b5      	bcc.n	8003754 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	e043      	b.n	8003876 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003800:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003804:	d118      	bne.n	8003838 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e013      	b.n	800384a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382e:	461a      	mov	r2, r3
 8003830:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e008      	b.n	800384a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	2300      	movs	r3, #0
 8003848:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	2300      	movs	r3, #0
 800385a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003868:	461a      	mov	r2, r3
 800386a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800386e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3301      	adds	r3, #1
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800387a:	461a      	mov	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4293      	cmp	r3, r2
 8003880:	d3b5      	bcc.n	80037ee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003894:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80038a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f043 0210 	orr.w	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <USB_DevInit+0x2c4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f043 0208 	orr.w	r2, r3, #8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038fc:	b004      	add	sp, #16
 80038fe:	4770      	bx	lr
 8003900:	803c3800 	.word	0x803c3800

08003904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800391e:	d901      	bls.n	8003924 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e01b      	b.n	800395c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	daf2      	bge.n	8003912 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	019b      	lsls	r3, r3, #6
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3301      	adds	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003948:	d901      	bls.n	800394e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e006      	b.n	800395c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d0f0      	beq.n	800393c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003980:	d901      	bls.n	8003986 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e018      	b.n	80039b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	daf2      	bge.n	8003974 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2210      	movs	r2, #16
 8003996:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3301      	adds	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039a4:	d901      	bls.n	80039aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e006      	b.n	80039b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d0f0      	beq.n	8003998 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0306 	and.w	r3, r3, #6
 8003a0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
 8003a1a:	e00a      	b.n	8003a32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d002      	beq.n	8003a28 <USB_GetDevSpeed+0x32>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b06      	cmp	r3, #6
 8003a26:	d102      	bne.n	8003a2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	75fb      	strb	r3, [r7, #23]
 8003a2c:	e001      	b.n	8003a32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a2e:	230f      	movs	r3, #15
 8003a30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d13a      	bne.n	8003ad2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d155      	bne.n	8003b40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	791b      	ldrb	r3, [r3, #4]
 8003aae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	059b      	lsls	r3, r3, #22
 8003ab6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e036      	b.n	8003b40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11a      	bne.n	8003b40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	791b      	ldrb	r3, [r3, #4]
 8003b24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b26:	430b      	orrs	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d161      	bne.n	8003c30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b82:	d11f      	bne.n	8003bc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ba2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	0151      	lsls	r1, r2, #5
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	440a      	add	r2, r1
 8003bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003be4:	4013      	ands	r3, r2
 8003be6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	0159      	lsls	r1, r3, #5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	440b      	add	r3, r1
 8003c22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c26:	4619      	mov	r1, r3
 8003c28:	4b35      	ldr	r3, [pc, #212]	@ (8003d00 <USB_DeactivateEndpoint+0x1b0>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
 8003c2e:	e060      	b.n	8003cf2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c46:	d11f      	bne.n	8003c88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	0151      	lsls	r1, r2, #5
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ca8:	4013      	ands	r3, r2
 8003caa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	0159      	lsls	r1, r3, #5
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	440b      	add	r3, r1
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cea:	4619      	mov	r1, r3
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <USB_DeactivateEndpoint+0x1b4>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	ec337800 	.word	0xec337800
 8003d04:	eff37800 	.word	0xeff37800

08003d08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	@ 0x28
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	f040 817f 	bne.w	8004028 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d132      	bne.n	8003d98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d4c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003d50:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003d54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d90:	0cdb      	lsrs	r3, r3, #19
 8003d92:	04db      	lsls	r3, r3, #19
 8003d94:	6113      	str	r3, [r2, #16]
 8003d96:	e097      	b.n	8003ec8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	0151      	lsls	r1, r2, #5
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	440a      	add	r2, r1
 8003dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003db2:	0cdb      	lsrs	r3, r3, #19
 8003db4:	04db      	lsls	r3, r3, #19
 8003db6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dd2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003dd6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003dda:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d11a      	bne.n	8003e18 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d903      	bls.n	8003df6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e14:	6113      	str	r3, [r2, #16]
 8003e16:	e044      	b.n	8003ea2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	1e5a      	subs	r2, r3, #1
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	8afb      	ldrh	r3, [r7, #22]
 8003e3e:	04d9      	lsls	r1, r3, #19
 8003e40:	4ba4      	ldr	r3, [pc, #656]	@ (80040d4 <USB_EPStartXfer+0x3cc>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	0148      	lsls	r0, r1, #5
 8003e48:	69f9      	ldr	r1, [r7, #28]
 8003e4a:	4401      	add	r1, r0
 8003e4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003e50:	4313      	orrs	r3, r2
 8003e52:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	791b      	ldrb	r3, [r3, #4]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d122      	bne.n	8003ea2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e76:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003e7a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	8afb      	ldrh	r3, [r7, #22]
 8003e8c:	075b      	lsls	r3, r3, #29
 8003e8e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003e92:	69b9      	ldr	r1, [r7, #24]
 8003e94:	0148      	lsls	r0, r1, #5
 8003e96:	69f9      	ldr	r1, [r7, #28]
 8003e98:	4401      	add	r1, r0
 8003e9a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb8:	69b9      	ldr	r1, [r7, #24]
 8003eba:	0148      	lsls	r0, r1, #5
 8003ebc:	69f9      	ldr	r1, [r7, #28]
 8003ebe:	4401      	add	r1, r0
 8003ec0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d14b      	bne.n	8003f66 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	791b      	ldrb	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d128      	bne.n	8003f44 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d110      	bne.n	8003f24 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e00f      	b.n	8003f44 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	e166      	b.n	8004234 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003f84:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	791b      	ldrb	r3, [r3, #4]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d015      	beq.n	8003fba <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 814e 	beq.w	8004234 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	69f9      	ldr	r1, [r7, #28]
 8003fb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	634b      	str	r3, [r1, #52]	@ 0x34
 8003fb8:	e13c      	b.n	8004234 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d110      	bne.n	8003fec <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fe4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00f      	b.n	800400c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	0151      	lsls	r1, r2, #5
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	440a      	add	r2, r1
 8004002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800400a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	68d9      	ldr	r1, [r3, #12]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	b298      	uxth	r0, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4603      	mov	r3, r0
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f9b9 	bl	8004398 <USB_WritePacket>
 8004026:	e105      	b.n	8004234 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004042:	0cdb      	lsrs	r3, r3, #19
 8004044:	04db      	lsls	r3, r3, #19
 8004046:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004062:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004066:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800406a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d132      	bne.n	80040d8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	0148      	lsls	r0, r1, #5
 80040a4:	69f9      	ldr	r1, [r7, #28]
 80040a6:	4401      	add	r1, r0
 80040a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80040ac:	4313      	orrs	r3, r2
 80040ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040ce:	6113      	str	r3, [r2, #16]
 80040d0:	e062      	b.n	8004198 <USB_EPStartXfer+0x490>
 80040d2:	bf00      	nop
 80040d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d123      	bne.n	8004128 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f6:	69b9      	ldr	r1, [r7, #24]
 80040f8:	0148      	lsls	r0, r1, #5
 80040fa:	69f9      	ldr	r1, [r7, #28]
 80040fc:	4401      	add	r1, r0
 80040fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004102:	4313      	orrs	r3, r2
 8004104:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	440a      	add	r2, r1
 800411c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004120:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004124:	6113      	str	r3, [r2, #16]
 8004126:	e037      	b.n	8004198 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4413      	add	r3, r2
 8004132:	1e5a      	subs	r2, r3, #1
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	8afa      	ldrh	r2, [r7, #22]
 8004144:	fb03 f202 	mul.w	r2, r3, r2
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	8afb      	ldrh	r3, [r7, #22]
 800415c:	04d9      	lsls	r1, r3, #19
 800415e:	4b38      	ldr	r3, [pc, #224]	@ (8004240 <USB_EPStartXfer+0x538>)
 8004160:	400b      	ands	r3, r1
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	0148      	lsls	r0, r1, #5
 8004166:	69f9      	ldr	r1, [r7, #28]
 8004168:	4401      	add	r1, r0
 800416a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800416e:	4313      	orrs	r3, r2
 8004170:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	0148      	lsls	r0, r1, #5
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	4401      	add	r1, r0
 8004190:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004194:	4313      	orrs	r3, r2
 8004196:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10d      	bne.n	80041ba <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68d9      	ldr	r1, [r3, #12]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b6:	460a      	mov	r2, r1
 80041b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	791b      	ldrb	r3, [r3, #4]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d128      	bne.n	8004214 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d110      	bne.n	80041f4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	0151      	lsls	r1, r2, #5
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	440a      	add	r2, r1
 80041e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00f      	b.n	8004214 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004212:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800422e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	1ff80000 	.word	0x1ff80000

08004244 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d14a      	bne.n	80042f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800427a:	f040 8086 	bne.w	800438a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800429c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80042a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d902      	bls.n	80042dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
          break;
 80042da:	e056      	b.n	800438a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042f4:	d0e7      	beq.n	80042c6 <USB_EPStopXfer+0x82>
 80042f6:	e048      	b.n	800438a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800430c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004310:	d13b      	bne.n	800438a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004330:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004334:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004354:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004358:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3301      	adds	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004366:	4293      	cmp	r3, r2
 8004368:	d902      	bls.n	8004370 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
          break;
 800436e:	e00c      	b.n	800438a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004388:	d0e7      	beq.n	800435a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800438a:	7dfb      	ldrb	r3, [r7, #23]
}
 800438c:	4618      	mov	r0, r3
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	@ 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	460b      	mov	r3, r1
 80043a8:	71fb      	strb	r3, [r7, #7]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80043b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d123      	bne.n	8004406 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80043be:	88bb      	ldrh	r3, [r7, #4]
 80043c0:	3303      	adds	r3, #3
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e018      	b.n	80043fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	031a      	lsls	r2, r3, #12
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d8:	461a      	mov	r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3301      	adds	r3, #1
 80043f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	429a      	cmp	r2, r3
 8004404:	d3e2      	bcc.n	80043cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3724      	adds	r7, #36	@ 0x24
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004414:	b480      	push	{r7}
 8004416:	b08b      	sub	sp, #44	@ 0x2c
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	b29b      	uxth	r3, r3
 8004430:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	e014      	b.n	800446a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	601a      	str	r2, [r3, #0]
    pDest++;
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	3301      	adds	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	3301      	adds	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	3301      	adds	r3, #1
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	3301      	adds	r3, #1
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	3301      	adds	r3, #1
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	429a      	cmp	r2, r3
 8004470:	d3e6      	bcc.n	8004440 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004472:	8bfb      	ldrh	r3, [r7, #30]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01e      	beq.n	80044b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004482:	461a      	mov	r2, r3
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	b2da      	uxtb	r2, r3
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	701a      	strb	r2, [r3, #0]
      i++;
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	3301      	adds	r3, #1
 80044a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	3301      	adds	r3, #1
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80044aa:	8bfb      	ldrh	r3, [r7, #30]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80044b0:	8bfb      	ldrh	r3, [r7, #30]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ea      	bne.n	800448c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	372c      	adds	r7, #44	@ 0x2c
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d12c      	bne.n	800453a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	db12      	blt.n	8004518 <USB_EPSetStall+0x54>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00f      	beq.n	8004518 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004512:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004516:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004532:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e02b      	b.n	8004592 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db12      	blt.n	8004572 <USB_EPSetStall+0xae>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00f      	beq.n	8004572 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	0151      	lsls	r1, r2, #5
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	440a      	add	r2, r1
 8004568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800456c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004570:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800458c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004590:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d128      	bne.n	800460e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	791b      	ldrb	r3, [r3, #4]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d003      	beq.n	80045ec <USB_EPClearStall+0x4c>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	791b      	ldrb	r3, [r3, #4]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d138      	bne.n	800465e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	e027      	b.n	800465e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004628:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800462c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	791b      	ldrb	r3, [r3, #4]
 8004632:	2b03      	cmp	r3, #3
 8004634:	d003      	beq.n	800463e <USB_EPClearStall+0x9e>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	791b      	ldrb	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d10f      	bne.n	800465e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800465c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800468a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800468e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80046a0:	68f9      	ldr	r1, [r7, #12]
 80046a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046e6:	f023 0302 	bic.w	r3, r3, #2
 80046ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004714:	f023 0303 	bic.w	r3, r3, #3
 8004718:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004754:	68fb      	ldr	r3, [r7, #12]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0c1b      	lsrs	r3, r3, #16
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	b29b      	uxth	r3, r3
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80047f8:	68bb      	ldr	r3, [r7, #8]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004806:	b480      	push	{r7}
 8004808:	b087      	sub	sp, #28
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004828:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	fa22 f303 	lsr.w	r3, r2, r3
 8004836:	01db      	lsls	r3, r3, #7
 8004838:	b2db      	uxtb	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004854:	68bb      	ldr	r3, [r7, #8]
}
 8004856:	4618      	mov	r0, r3
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0301 	and.w	r3, r3, #1
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004898:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800489c:	f023 0307 	bic.w	r3, r3, #7
 80048a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	460b      	mov	r3, r1
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	333c      	adds	r3, #60	@ 0x3c
 80048da:	3304      	adds	r3, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4a26      	ldr	r2, [pc, #152]	@ (800497c <USB_EP0_OutStart+0xb8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d90a      	bls.n	80048fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048f8:	d101      	bne.n	80048fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e037      	b.n	800496e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004918:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800491c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800492c:	f043 0318 	orr.w	r3, r3, #24
 8004930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004940:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004944:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004946:	7afb      	ldrb	r3, [r7, #11]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10f      	bne.n	800496c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004966:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800496a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	4f54300a 	.word	0x4f54300a

08004980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004998:	d901      	bls.n	800499e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e01b      	b.n	80049d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	daf2      	bge.n	800498c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049c2:	d901      	bls.n	80049c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d0f0      	beq.n	80049b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80049f0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80049f4:	f002 fc82 	bl	80072fc <USBD_static_malloc>
 80049f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	32b0      	adds	r2, #176	@ 0xb0
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004a10:	2302      	movs	r3, #2
 8004a12:	e0d4      	b.n	8004bbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004a14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004a18:	2100      	movs	r1, #0
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f002 fcb2 	bl	8007384 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	32b0      	adds	r2, #176	@ 0xb0
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	32b0      	adds	r2, #176	@ 0xb0
 8004a3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7c1b      	ldrb	r3, [r3, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d138      	bne.n	8004abe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004bc8 <USBD_CDC_Init+0x1e4>)
 8004a4e:	7819      	ldrb	r1, [r3, #0]
 8004a50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a54:	2202      	movs	r2, #2
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f002 fb2d 	bl	80070b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc8 <USBD_CDC_Init+0x1e4>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	3324      	adds	r3, #36	@ 0x24
 8004a72:	2201      	movs	r2, #1
 8004a74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004a76:	4b55      	ldr	r3, [pc, #340]	@ (8004bcc <USBD_CDC_Init+0x1e8>)
 8004a78:	7819      	ldrb	r1, [r3, #0]
 8004a7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a7e:	2202      	movs	r2, #2
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f002 fb18 	bl	80070b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004a86:	4b51      	ldr	r3, [pc, #324]	@ (8004bcc <USBD_CDC_Init+0x1e8>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f003 020f 	and.w	r2, r3, #15
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd0 <USBD_CDC_Init+0x1ec>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	f003 020f 	and.w	r2, r3, #15
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3326      	adds	r3, #38	@ 0x26
 8004ab8:	2210      	movs	r2, #16
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	e035      	b.n	8004b2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004abe:	4b42      	ldr	r3, [pc, #264]	@ (8004bc8 <USBD_CDC_Init+0x1e4>)
 8004ac0:	7819      	ldrb	r1, [r3, #0]
 8004ac2:	2340      	movs	r3, #64	@ 0x40
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f002 faf5 	bl	80070b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004acc:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc8 <USBD_CDC_Init+0x1e4>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f003 020f 	and.w	r2, r3, #15
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3324      	adds	r3, #36	@ 0x24
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ae6:	4b39      	ldr	r3, [pc, #228]	@ (8004bcc <USBD_CDC_Init+0x1e8>)
 8004ae8:	7819      	ldrb	r1, [r3, #0]
 8004aea:	2340      	movs	r3, #64	@ 0x40
 8004aec:	2202      	movs	r2, #2
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f002 fae1 	bl	80070b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004af4:	4b35      	ldr	r3, [pc, #212]	@ (8004bcc <USBD_CDC_Init+0x1e8>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b10:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd0 <USBD_CDC_Init+0x1ec>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3326      	adds	r3, #38	@ 0x26
 8004b26:	2210      	movs	r2, #16
 8004b28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b2a:	4b29      	ldr	r3, [pc, #164]	@ (8004bd0 <USBD_CDC_Init+0x1ec>)
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	2308      	movs	r3, #8
 8004b30:	2203      	movs	r2, #3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f002 fabf 	bl	80070b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004b38:	4b25      	ldr	r3, [pc, #148]	@ (8004bd0 <USBD_CDC_Init+0x1ec>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3324      	adds	r3, #36	@ 0x24
 8004b4e:	2201      	movs	r2, #1
 8004b50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	33b0      	adds	r3, #176	@ 0xb0
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e018      	b.n	8004bbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	7c1b      	ldrb	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b94:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <USBD_CDC_Init+0x1e8>)
 8004b96:	7819      	ldrb	r1, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f002 fb76 	bl	8007294 <USBD_LL_PrepareReceive>
 8004ba8:	e008      	b.n	8004bbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004baa:	4b08      	ldr	r3, [pc, #32]	@ (8004bcc <USBD_CDC_Init+0x1e8>)
 8004bac:	7819      	ldrb	r1, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bb4:	2340      	movs	r3, #64	@ 0x40
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f002 fb6c 	bl	8007294 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000093 	.word	0x20000093
 8004bcc:	20000094 	.word	0x20000094
 8004bd0:	20000095 	.word	0x20000095

08004bd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004be0:	4b3a      	ldr	r3, [pc, #232]	@ (8004ccc <USBD_CDC_DeInit+0xf8>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f002 fa8b 	bl	8007102 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004bec:	4b37      	ldr	r3, [pc, #220]	@ (8004ccc <USBD_CDC_DeInit+0xf8>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f003 020f 	and.w	r2, r3, #15
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3324      	adds	r3, #36	@ 0x24
 8004c02:	2200      	movs	r2, #0
 8004c04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004c06:	4b32      	ldr	r3, [pc, #200]	@ (8004cd0 <USBD_CDC_DeInit+0xfc>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f002 fa78 	bl	8007102 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004c12:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd0 <USBD_CDC_DeInit+0xfc>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	f003 020f 	and.w	r2, r3, #15
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004c2e:	4b29      	ldr	r3, [pc, #164]	@ (8004cd4 <USBD_CDC_DeInit+0x100>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f002 fa64 	bl	8007102 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004c3a:	4b26      	ldr	r3, [pc, #152]	@ (8004cd4 <USBD_CDC_DeInit+0x100>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3324      	adds	r3, #36	@ 0x24
 8004c50:	2200      	movs	r2, #0
 8004c52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004c54:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <USBD_CDC_DeInit+0x100>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3326      	adds	r3, #38	@ 0x26
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	32b0      	adds	r2, #176	@ 0xb0
 8004c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01f      	beq.n	8004cc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	33b0      	adds	r3, #176	@ 0xb0
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	32b0      	adds	r2, #176	@ 0xb0
 8004c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f002 fb38 	bl	8007318 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	32b0      	adds	r2, #176	@ 0xb0
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000093 	.word	0x20000093
 8004cd0:	20000094 	.word	0x20000094
 8004cd4:	20000095 	.word	0x20000095

08004cd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	32b0      	adds	r2, #176	@ 0xb0
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e0bf      	b.n	8004e88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d050      	beq.n	8004db6 <USBD_CDC_Setup+0xde>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	f040 80af 	bne.w	8004e78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	88db      	ldrh	r3, [r3, #6]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d03a      	beq.n	8004d98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	da1b      	bge.n	8004d64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	33b0      	adds	r3, #176	@ 0xb0
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004d42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	88d2      	ldrh	r2, [r2, #6]
 8004d48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	88db      	ldrh	r3, [r3, #6]
 8004d4e:	2b07      	cmp	r3, #7
 8004d50:	bf28      	it	cs
 8004d52:	2307      	movcs	r3, #7
 8004d54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	89fa      	ldrh	r2, [r7, #14]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f001 fd53 	bl	8006808 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004d62:	e090      	b.n	8004e86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	785a      	ldrb	r2, [r3, #1]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	88db      	ldrh	r3, [r3, #6]
 8004d72:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d74:	d803      	bhi.n	8004d7e <USBD_CDC_Setup+0xa6>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	88db      	ldrh	r3, [r3, #6]
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	e000      	b.n	8004d80 <USBD_CDC_Setup+0xa8>
 8004d7e:	2240      	movs	r2, #64	@ 0x40
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004d86:	6939      	ldr	r1, [r7, #16]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 fd65 	bl	8006860 <USBD_CtlPrepareRx>
      break;
 8004d96:	e076      	b.n	8004e86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	33b0      	adds	r3, #176	@ 0xb0
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	7850      	ldrb	r0, [r2, #1]
 8004dae:	2200      	movs	r2, #0
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4798      	blx	r3
      break;
 8004db4:	e067      	b.n	8004e86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	785b      	ldrb	r3, [r3, #1]
 8004dba:	2b0b      	cmp	r3, #11
 8004dbc:	d851      	bhi.n	8004e62 <USBD_CDC_Setup+0x18a>
 8004dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <USBD_CDC_Setup+0xec>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004df5 	.word	0x08004df5
 8004dc8:	08004e71 	.word	0x08004e71
 8004dcc:	08004e63 	.word	0x08004e63
 8004dd0:	08004e63 	.word	0x08004e63
 8004dd4:	08004e63 	.word	0x08004e63
 8004dd8:	08004e63 	.word	0x08004e63
 8004ddc:	08004e63 	.word	0x08004e63
 8004de0:	08004e63 	.word	0x08004e63
 8004de4:	08004e63 	.word	0x08004e63
 8004de8:	08004e63 	.word	0x08004e63
 8004dec:	08004e1f 	.word	0x08004e1f
 8004df0:	08004e49 	.word	0x08004e49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d107      	bne.n	8004e10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e00:	f107 030a 	add.w	r3, r7, #10
 8004e04:	2202      	movs	r2, #2
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 fcfd 	bl	8006808 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e0e:	e032      	b.n	8004e76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 fc7b 	bl	800670e <USBD_CtlError>
            ret = USBD_FAIL;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	75fb      	strb	r3, [r7, #23]
          break;
 8004e1c:	e02b      	b.n	8004e76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d107      	bne.n	8004e3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e2a:	f107 030d 	add.w	r3, r7, #13
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 fce8 	bl	8006808 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e38:	e01d      	b.n	8004e76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f001 fc66 	bl	800670e <USBD_CtlError>
            ret = USBD_FAIL;
 8004e42:	2303      	movs	r3, #3
 8004e44:	75fb      	strb	r3, [r7, #23]
          break;
 8004e46:	e016      	b.n	8004e76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d00f      	beq.n	8004e74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 fc59 	bl	800670e <USBD_CtlError>
            ret = USBD_FAIL;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e60:	e008      	b.n	8004e74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004e62:	6839      	ldr	r1, [r7, #0]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 fc52 	bl	800670e <USBD_CtlError>
          ret = USBD_FAIL;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e6e:	e002      	b.n	8004e76 <USBD_CDC_Setup+0x19e>
          break;
 8004e70:	bf00      	nop
 8004e72:	e008      	b.n	8004e86 <USBD_CDC_Setup+0x1ae>
          break;
 8004e74:	bf00      	nop
      }
      break;
 8004e76:	e006      	b.n	8004e86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 fc47 	bl	800670e <USBD_CtlError>
      ret = USBD_FAIL;
 8004e80:	2303      	movs	r3, #3
 8004e82:	75fb      	strb	r3, [r7, #23]
      break;
 8004e84:	bf00      	nop
  }

  return (uint8_t)ret;
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004ea2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	32b0      	adds	r2, #176	@ 0xb0
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e065      	b.n	8004f86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	32b0      	adds	r2, #176	@ 0xb0
 8004ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 020f 	and.w	r2, r3, #15
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	3318      	adds	r3, #24
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d02f      	beq.n	8004f44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	f003 020f 	and.w	r2, r3, #15
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3318      	adds	r3, #24
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	f003 010f 	and.w	r1, r3, #15
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	460b      	mov	r3, r1
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	440b      	add	r3, r1
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4403      	add	r3, r0
 8004f0c:	331c      	adds	r3, #28
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f14:	fb01 f303 	mul.w	r3, r1, r3
 8004f18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d112      	bne.n	8004f44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	3318      	adds	r3, #24
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f36:	78f9      	ldrb	r1, [r7, #3]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f002 f988 	bl	8007252 <USBD_LL_Transmit>
 8004f42:	e01f      	b.n	8004f84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	33b0      	adds	r3, #176	@ 0xb0
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d010      	beq.n	8004f84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	33b0      	adds	r3, #176	@ 0xb0
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	32b0      	adds	r2, #176	@ 0xb0
 8004fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	32b0      	adds	r2, #176	@ 0xb0
 8004fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e01a      	b.n	8004ff6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f002 f986 	bl	80072d6 <USBD_LL_GetRxDataSize>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	33b0      	adds	r3, #176	@ 0xb0
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	32b0      	adds	r2, #176	@ 0xb0
 8005010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005014:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800501c:	2303      	movs	r3, #3
 800501e:	e024      	b.n	800506a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	33b0      	adds	r3, #176	@ 0xb0
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d019      	beq.n	8005068 <USBD_CDC_EP0_RxReady+0x6a>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800503a:	2bff      	cmp	r3, #255	@ 0xff
 800503c:	d014      	beq.n	8005068 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	33b0      	adds	r3, #176	@ 0xb0
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005056:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800505e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	22ff      	movs	r2, #255	@ 0xff
 8005064:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800507c:	2182      	movs	r1, #130	@ 0x82
 800507e:	4818      	ldr	r0, [pc, #96]	@ (80050e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005080:	f000 fd0f 	bl	8005aa2 <USBD_GetEpDesc>
 8005084:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005086:	2101      	movs	r1, #1
 8005088:	4815      	ldr	r0, [pc, #84]	@ (80050e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800508a:	f000 fd0a 	bl	8005aa2 <USBD_GetEpDesc>
 800508e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005090:	2181      	movs	r1, #129	@ 0x81
 8005092:	4813      	ldr	r0, [pc, #76]	@ (80050e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005094:	f000 fd05 	bl	8005aa2 <USBD_GetEpDesc>
 8005098:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2210      	movs	r2, #16
 80050a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d006      	beq.n	80050ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050b4:	711a      	strb	r2, [r3, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050c8:	711a      	strb	r2, [r3, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2243      	movs	r2, #67	@ 0x43
 80050d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80050d4:	4b02      	ldr	r3, [pc, #8]	@ (80050e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000050 	.word	0x20000050

080050e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80050ec:	2182      	movs	r1, #130	@ 0x82
 80050ee:	4818      	ldr	r0, [pc, #96]	@ (8005150 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80050f0:	f000 fcd7 	bl	8005aa2 <USBD_GetEpDesc>
 80050f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80050f6:	2101      	movs	r1, #1
 80050f8:	4815      	ldr	r0, [pc, #84]	@ (8005150 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80050fa:	f000 fcd2 	bl	8005aa2 <USBD_GetEpDesc>
 80050fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005100:	2181      	movs	r1, #129	@ 0x81
 8005102:	4813      	ldr	r0, [pc, #76]	@ (8005150 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005104:	f000 fccd 	bl	8005aa2 <USBD_GetEpDesc>
 8005108:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2210      	movs	r2, #16
 8005114:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d006      	beq.n	800512a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2200      	movs	r2, #0
 8005120:	711a      	strb	r2, [r3, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f042 0202 	orr.w	r2, r2, #2
 8005128:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d006      	beq.n	800513e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	711a      	strb	r2, [r3, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f042 0202 	orr.w	r2, r2, #2
 800513c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2243      	movs	r2, #67	@ 0x43
 8005142:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005144:	4b02      	ldr	r3, [pc, #8]	@ (8005150 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000050 	.word	0x20000050

08005154 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800515c:	2182      	movs	r1, #130	@ 0x82
 800515e:	4818      	ldr	r0, [pc, #96]	@ (80051c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005160:	f000 fc9f 	bl	8005aa2 <USBD_GetEpDesc>
 8005164:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005166:	2101      	movs	r1, #1
 8005168:	4815      	ldr	r0, [pc, #84]	@ (80051c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800516a:	f000 fc9a 	bl	8005aa2 <USBD_GetEpDesc>
 800516e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005170:	2181      	movs	r1, #129	@ 0x81
 8005172:	4813      	ldr	r0, [pc, #76]	@ (80051c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005174:	f000 fc95 	bl	8005aa2 <USBD_GetEpDesc>
 8005178:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2210      	movs	r2, #16
 8005184:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d006      	beq.n	800519a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2200      	movs	r2, #0
 8005190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005194:	711a      	strb	r2, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d006      	beq.n	80051ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051a8:	711a      	strb	r2, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2243      	movs	r2, #67	@ 0x43
 80051b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051b4:	4b02      	ldr	r3, [pc, #8]	@ (80051c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000050 	.word	0x20000050

080051c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	220a      	movs	r2, #10
 80051d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80051d2:	4b03      	ldr	r3, [pc, #12]	@ (80051e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	2000000c 	.word	0x2000000c

080051e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e009      	b.n	800520c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	33b0      	adds	r3, #176	@ 0xb0
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	32b0      	adds	r2, #176	@ 0xb0
 800522e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005232:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800523a:	2303      	movs	r3, #3
 800523c:	e008      	b.n	8005250 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	32b0      	adds	r2, #176	@ 0xb0
 8005270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800527c:	2303      	movs	r3, #3
 800527e:	e004      	b.n	800528a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	32b0      	adds	r2, #176	@ 0xb0
 80052aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	32b0      	adds	r2, #176	@ 0xb0
 80052ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e018      	b.n	80052f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7c1b      	ldrb	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <USBD_CDC_ReceivePacket+0x68>)
 80052d0:	7819      	ldrb	r1, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 ffd9 	bl	8007294 <USBD_LL_PrepareReceive>
 80052e2:	e008      	b.n	80052f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052e4:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <USBD_CDC_ReceivePacket+0x68>)
 80052e6:	7819      	ldrb	r1, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052ee:	2340      	movs	r3, #64	@ 0x40
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 ffcf 	bl	8007294 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20000094 	.word	0x20000094

08005304 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	e01f      	b.n	800535c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	79fa      	ldrb	r2, [r7, #7]
 800534e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f001 fe49 	bl	8006fe8 <USBD_LL_Init>
 8005356:	4603      	mov	r3, r0
 8005358:	75fb      	strb	r3, [r7, #23]

  return ret;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005378:	2303      	movs	r3, #3
 800537a:	e025      	b.n	80053c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	32ae      	adds	r2, #174	@ 0xae
 800538e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	32ae      	adds	r2, #174	@ 0xae
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	f107 020e 	add.w	r2, r7, #14
 80053ac:	4610      	mov	r0, r2
 80053ae:	4798      	blx	r3
 80053b0:	4602      	mov	r2, r0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f001 fe51 	bl	8007080 <USBD_LL_Start>
 80053de:	4603      	mov	r3, r0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	460b      	mov	r3, r1
 8005408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d009      	beq.n	800542c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	4611      	mov	r1, r2
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	4611      	mov	r1, r2
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f90c 	bl	800669a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d01a      	beq.n	80054dc <USBD_LL_SetupStage+0x72>
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d822      	bhi.n	80054f0 <USBD_LL_SetupStage+0x86>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <USBD_LL_SetupStage+0x4a>
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d00a      	beq.n	80054c8 <USBD_LL_SetupStage+0x5e>
 80054b2:	e01d      	b.n	80054f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb63 	bl	8005b88 <USBD_StdDevReq>
 80054c2:	4603      	mov	r3, r0
 80054c4:	73fb      	strb	r3, [r7, #15]
      break;
 80054c6:	e020      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fbcb 	bl	8005c6c <USBD_StdItfReq>
 80054d6:	4603      	mov	r3, r0
 80054d8:	73fb      	strb	r3, [r7, #15]
      break;
 80054da:	e016      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fc2d 	bl	8005d44 <USBD_StdEPReq>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
      break;
 80054ee:	e00c      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80054f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 fe1e 	bl	8007140 <USBD_LL_StallEP>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
      break;
 8005508:	bf00      	nop
  }

  return ret;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	460b      	mov	r3, r1
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d16e      	bne.n	800560a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005532:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800553a:	2b03      	cmp	r3, #3
 800553c:	f040 8098 	bne.w	8005670 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	d913      	bls.n	8005574 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	1ad2      	subs	r2, r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4293      	cmp	r3, r2
 8005564:	bf28      	it	cs
 8005566:	4613      	movcs	r3, r2
 8005568:	461a      	mov	r2, r3
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f001 f994 	bl	800689a <USBD_CtlContinueRx>
 8005572:	e07d      	b.n	8005670 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2b02      	cmp	r3, #2
 8005580:	d014      	beq.n	80055ac <USBD_LL_DataOutStage+0x98>
 8005582:	2b02      	cmp	r3, #2
 8005584:	d81d      	bhi.n	80055c2 <USBD_LL_DataOutStage+0xae>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <USBD_LL_DataOutStage+0x7c>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d003      	beq.n	8005596 <USBD_LL_DataOutStage+0x82>
 800558e:	e018      	b.n	80055c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	75bb      	strb	r3, [r7, #22]
            break;
 8005594:	e018      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800559c:	b2db      	uxtb	r3, r3
 800559e:	4619      	mov	r1, r3
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fa64 	bl	8005a6e <USBD_CoreFindIF>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75bb      	strb	r3, [r7, #22]
            break;
 80055aa:	e00d      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fa66 	bl	8005a88 <USBD_CoreFindEP>
 80055bc:	4603      	mov	r3, r0
 80055be:	75bb      	strb	r3, [r7, #22]
            break;
 80055c0:	e002      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75bb      	strb	r3, [r7, #22]
            break;
 80055c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80055c8:	7dbb      	ldrb	r3, [r7, #22]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d119      	bne.n	8005602 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d113      	bne.n	8005602 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80055da:	7dba      	ldrb	r2, [r7, #22]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	32ae      	adds	r2, #174	@ 0xae
 80055e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80055ea:	7dba      	ldrb	r2, [r7, #22]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80055f2:	7dba      	ldrb	r2, [r7, #22]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	32ae      	adds	r2, #174	@ 0xae
 80055f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f001 f95a 	bl	80068bc <USBD_CtlSendStatus>
 8005608:	e032      	b.n	8005670 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800560a:	7afb      	ldrb	r3, [r7, #11]
 800560c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005610:	b2db      	uxtb	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fa37 	bl	8005a88 <USBD_CoreFindEP>
 800561a:	4603      	mov	r3, r0
 800561c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800561e:	7dbb      	ldrb	r3, [r7, #22]
 8005620:	2bff      	cmp	r3, #255	@ 0xff
 8005622:	d025      	beq.n	8005670 <USBD_LL_DataOutStage+0x15c>
 8005624:	7dbb      	ldrb	r3, [r7, #22]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d122      	bne.n	8005670 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d117      	bne.n	8005666 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005636:	7dba      	ldrb	r2, [r7, #22]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	32ae      	adds	r2, #174	@ 0xae
 800563c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00f      	beq.n	8005666 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005646:	7dba      	ldrb	r2, [r7, #22]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800564e:	7dba      	ldrb	r2, [r7, #22]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	32ae      	adds	r2, #174	@ 0xae
 8005654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	7afa      	ldrb	r2, [r7, #11]
 800565c:	4611      	mov	r1, r2
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	4798      	blx	r3
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005666:	7dfb      	ldrb	r3, [r7, #23]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	e000      	b.n	8005672 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	460b      	mov	r3, r1
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d16f      	bne.n	800576e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3314      	adds	r3, #20
 8005692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800569a:	2b02      	cmp	r3, #2
 800569c:	d15a      	bne.n	8005754 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d914      	bls.n	80056d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	461a      	mov	r2, r3
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f001 f8bc 	bl	800683e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056c6:	2300      	movs	r3, #0
 80056c8:	2200      	movs	r2, #0
 80056ca:	2100      	movs	r1, #0
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f001 fde1 	bl	8007294 <USBD_LL_PrepareReceive>
 80056d2:	e03f      	b.n	8005754 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d11c      	bne.n	800571a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d316      	bcc.n	800571a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d20f      	bcs.n	800571a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056fa:	2200      	movs	r2, #0
 80056fc:	2100      	movs	r1, #0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f001 f89d 	bl	800683e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800570c:	2300      	movs	r3, #0
 800570e:	2200      	movs	r2, #0
 8005710:	2100      	movs	r1, #0
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f001 fdbe 	bl	8007294 <USBD_LL_PrepareReceive>
 8005718:	e01c      	b.n	8005754 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d10f      	bne.n	8005746 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005746:	2180      	movs	r1, #128	@ 0x80
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f001 fcf9 	bl	8007140 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f001 f8c7 	bl	80068e2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d03a      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff fe42 	bl	80053e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800576c:	e032      	b.n	80057d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800576e:	7afb      	ldrb	r3, [r7, #11]
 8005770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005774:	b2db      	uxtb	r3, r3
 8005776:	4619      	mov	r1, r3
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f985 	bl	8005a88 <USBD_CoreFindEP>
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	2bff      	cmp	r3, #255	@ 0xff
 8005786:	d025      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d122      	bne.n	80057d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b03      	cmp	r3, #3
 8005798:	d11c      	bne.n	80057d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800579a:	7dfa      	ldrb	r2, [r7, #23]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	32ae      	adds	r2, #174	@ 0xae
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d014      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80057aa:	7dfa      	ldrb	r2, [r7, #23]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80057b2:	7dfa      	ldrb	r2, [r7, #23]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	32ae      	adds	r2, #174	@ 0xae
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	7afa      	ldrb	r2, [r7, #11]
 80057c0:	4611      	mov	r1, r2
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	4798      	blx	r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80057ca:	7dbb      	ldrb	r3, [r7, #22]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80057d0:	7dbb      	ldrb	r3, [r7, #22]
 80057d2:	e000      	b.n	80057d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6852      	ldr	r2, [r2, #4]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	4611      	mov	r1, r2
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005840:	2303      	movs	r3, #3
 8005842:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005844:	2340      	movs	r3, #64	@ 0x40
 8005846:	2200      	movs	r2, #0
 8005848:	2100      	movs	r1, #0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 fc33 	bl	80070b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2240      	movs	r2, #64	@ 0x40
 800585c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005860:	2340      	movs	r3, #64	@ 0x40
 8005862:	2200      	movs	r2, #0
 8005864:	2180      	movs	r1, #128	@ 0x80
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 fc25 	bl	80070b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2240      	movs	r2, #64	@ 0x40
 8005876:	621a      	str	r2, [r3, #32]

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d006      	beq.n	80058c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2204      	movs	r2, #4
 80058c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d106      	bne.n	80058fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b03      	cmp	r3, #3
 800591c:	d110      	bne.n	8005940 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	32ae      	adds	r2, #174	@ 0xae
 8005960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005968:	2303      	movs	r3, #3
 800596a:	e01c      	b.n	80059a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b03      	cmp	r3, #3
 8005976:	d115      	bne.n	80059a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	32ae      	adds	r2, #174	@ 0xae
 8005982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	32ae      	adds	r2, #174	@ 0xae
 8005996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	4611      	mov	r1, r2
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	32ae      	adds	r2, #174	@ 0xae
 80059c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e01c      	b.n	8005a0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d115      	bne.n	8005a08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	32ae      	adds	r2, #174	@ 0xae
 80059e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	32ae      	adds	r2, #174	@ 0xae
 80059fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	4611      	mov	r1, r2
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00e      	beq.n	8005a64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6852      	ldr	r2, [r2, #4]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	4611      	mov	r1, r2
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005a60:	2303      	movs	r3, #3
 8005a62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	885b      	ldrh	r3, [r3, #2]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	7812      	ldrb	r2, [r2, #0]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d91f      	bls.n	8005b08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ace:	e013      	b.n	8005af8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ad0:	f107 030a 	add.w	r3, r7, #10
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6978      	ldr	r0, [r7, #20]
 8005ad8:	f000 f81b 	bl	8005b12 <USBD_GetNextDesc>
 8005adc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d108      	bne.n	8005af8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	789b      	ldrb	r3, [r3, #2]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d008      	beq.n	8005b06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	885b      	ldrh	r3, [r3, #2]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	897b      	ldrh	r3, [r7, #10]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d8e5      	bhi.n	8005ad0 <USBD_GetEpDesc+0x2e>
 8005b04:	e000      	b.n	8005b08 <USBD_GetEpDesc+0x66>
          break;
 8005b06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005b08:	693b      	ldr	r3, [r7, #16]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	4413      	add	r3, r2
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b087      	sub	sp, #28
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b68:	8a3b      	ldrh	r3, [r7, #16]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	b21a      	sxth	r2, r3
 8005b6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	b21b      	sxth	r3, r3
 8005b76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b78:	89fb      	ldrh	r3, [r7, #14]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d005      	beq.n	8005bae <USBD_StdDevReq+0x26>
 8005ba2:	2b40      	cmp	r3, #64	@ 0x40
 8005ba4:	d857      	bhi.n	8005c56 <USBD_StdDevReq+0xce>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00f      	beq.n	8005bca <USBD_StdDevReq+0x42>
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d153      	bne.n	8005c56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	32ae      	adds	r2, #174	@ 0xae
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc8:	e04a      	b.n	8005c60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d83b      	bhi.n	8005c4a <USBD_StdDevReq+0xc2>
 8005bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <USBD_StdDevReq+0x50>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005c4b 	.word	0x08005c4b
 8005be4:	08005c37 	.word	0x08005c37
 8005be8:	08005c4b 	.word	0x08005c4b
 8005bec:	08005c0b 	.word	0x08005c0b
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c4b 	.word	0x08005c4b
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c15 	.word	0x08005c15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa3c 	bl	8006080 <USBD_GetDescriptor>
          break;
 8005c08:	e024      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fba1 	bl	8006354 <USBD_SetAddress>
          break;
 8005c12:	e01f      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fbe0 	bl	80063dc <USBD_SetConfig>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]
          break;
 8005c20:	e018      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fc83 	bl	8006530 <USBD_GetConfig>
          break;
 8005c2a:	e013      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fcb4 	bl	800659c <USBD_GetStatus>
          break;
 8005c34:	e00e      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fce3 	bl	8006604 <USBD_SetFeature>
          break;
 8005c3e:	e009      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fd07 	bl	8006656 <USBD_ClrFeature>
          break;
 8005c48:	e004      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fd5e 	bl	800670e <USBD_CtlError>
          break;
 8005c52:	bf00      	nop
      }
      break;
 8005c54:	e004      	b.n	8005c60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fd58 	bl	800670e <USBD_CtlError>
      break;
 8005c5e:	bf00      	nop
  }

  return ret;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop

08005c6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c82:	2b40      	cmp	r3, #64	@ 0x40
 8005c84:	d005      	beq.n	8005c92 <USBD_StdItfReq+0x26>
 8005c86:	2b40      	cmp	r3, #64	@ 0x40
 8005c88:	d852      	bhi.n	8005d30 <USBD_StdItfReq+0xc4>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <USBD_StdItfReq+0x26>
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d14e      	bne.n	8005d30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d840      	bhi.n	8005d22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	889b      	ldrh	r3, [r3, #4]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d836      	bhi.n	8005d18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	889b      	ldrh	r3, [r3, #4]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fedb 	bl	8005a6e <USBD_CoreFindIF>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	2bff      	cmp	r3, #255	@ 0xff
 8005cc0:	d01d      	beq.n	8005cfe <USBD_StdItfReq+0x92>
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11a      	bne.n	8005cfe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005cc8:	7bba      	ldrb	r2, [r7, #14]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	32ae      	adds	r2, #174	@ 0xae
 8005cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00f      	beq.n	8005cf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005cd8:	7bba      	ldrb	r2, [r7, #14]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ce0:	7bba      	ldrb	r2, [r7, #14]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	32ae      	adds	r2, #174	@ 0xae
 8005ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005cf6:	e004      	b.n	8005d02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005cfc:	e001      	b.n	8005d02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	88db      	ldrh	r3, [r3, #6]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d110      	bne.n	8005d2c <USBD_StdItfReq+0xc0>
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10d      	bne.n	8005d2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fdd3 	bl	80068bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d16:	e009      	b.n	8005d2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fcf7 	bl	800670e <USBD_CtlError>
          break;
 8005d20:	e004      	b.n	8005d2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fcf2 	bl	800670e <USBD_CtlError>
          break;
 8005d2a:	e000      	b.n	8005d2e <USBD_StdItfReq+0xc2>
          break;
 8005d2c:	bf00      	nop
      }
      break;
 8005d2e:	e004      	b.n	8005d3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fceb 	bl	800670e <USBD_CtlError>
      break;
 8005d38:	bf00      	nop
  }

  return ret;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	889b      	ldrh	r3, [r3, #4]
 8005d56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d007      	beq.n	8005d74 <USBD_StdEPReq+0x30>
 8005d64:	2b40      	cmp	r3, #64	@ 0x40
 8005d66:	f200 817f 	bhi.w	8006068 <USBD_StdEPReq+0x324>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d02a      	beq.n	8005dc4 <USBD_StdEPReq+0x80>
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	f040 817a 	bne.w	8006068 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fe85 	bl	8005a88 <USBD_CoreFindEP>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d82:	7b7b      	ldrb	r3, [r7, #13]
 8005d84:	2bff      	cmp	r3, #255	@ 0xff
 8005d86:	f000 8174 	beq.w	8006072 <USBD_StdEPReq+0x32e>
 8005d8a:	7b7b      	ldrb	r3, [r7, #13]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 8170 	bne.w	8006072 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005d92:	7b7a      	ldrb	r2, [r7, #13]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005d9a:	7b7a      	ldrb	r2, [r7, #13]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	32ae      	adds	r2, #174	@ 0xae
 8005da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8163 	beq.w	8006072 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005dac:	7b7a      	ldrb	r2, [r7, #13]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	32ae      	adds	r2, #174	@ 0xae
 8005db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dc2:	e156      	b.n	8006072 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d008      	beq.n	8005dde <USBD_StdEPReq+0x9a>
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	f300 8145 	bgt.w	800605c <USBD_StdEPReq+0x318>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 809b 	beq.w	8005f0e <USBD_StdEPReq+0x1ca>
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d03c      	beq.n	8005e56 <USBD_StdEPReq+0x112>
 8005ddc:	e13e      	b.n	800605c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d002      	beq.n	8005df0 <USBD_StdEPReq+0xac>
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d016      	beq.n	8005e1c <USBD_StdEPReq+0xd8>
 8005dee:	e02c      	b.n	8005e4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <USBD_StdEPReq+0xce>
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b80      	cmp	r3, #128	@ 0x80
 8005dfa:	d00a      	beq.n	8005e12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dfc:	7bbb      	ldrb	r3, [r7, #14]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 f99d 	bl	8007140 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e06:	2180      	movs	r1, #128	@ 0x80
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 f999 	bl	8007140 <USBD_LL_StallEP>
 8005e0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e10:	e020      	b.n	8005e54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fc7a 	bl	800670e <USBD_CtlError>
              break;
 8005e1a:	e01b      	b.n	8005e54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	885b      	ldrh	r3, [r3, #2]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10e      	bne.n	8005e42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <USBD_StdEPReq+0xfe>
 8005e2a:	7bbb      	ldrb	r3, [r7, #14]
 8005e2c:	2b80      	cmp	r3, #128	@ 0x80
 8005e2e:	d008      	beq.n	8005e42 <USBD_StdEPReq+0xfe>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	88db      	ldrh	r3, [r3, #6]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 f97f 	bl	8007140 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fd3a 	bl	80068bc <USBD_CtlSendStatus>

              break;
 8005e48:	e004      	b.n	8005e54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fc5e 	bl	800670e <USBD_CtlError>
              break;
 8005e52:	bf00      	nop
          }
          break;
 8005e54:	e107      	b.n	8006066 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d002      	beq.n	8005e68 <USBD_StdEPReq+0x124>
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d016      	beq.n	8005e94 <USBD_StdEPReq+0x150>
 8005e66:	e04b      	b.n	8005f00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <USBD_StdEPReq+0x146>
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	2b80      	cmp	r3, #128	@ 0x80
 8005e72:	d00a      	beq.n	8005e8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e74:	7bbb      	ldrb	r3, [r7, #14]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 f961 	bl	8007140 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e7e:	2180      	movs	r1, #128	@ 0x80
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 f95d 	bl	8007140 <USBD_LL_StallEP>
 8005e86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e88:	e040      	b.n	8005f0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fc3e 	bl	800670e <USBD_CtlError>
              break;
 8005e92:	e03b      	b.n	8005f0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	885b      	ldrh	r3, [r3, #2]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d136      	bne.n	8005f0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 f967 	bl	800717e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fd03 	bl	80068bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fde4 	bl	8005a88 <USBD_CoreFindEP>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ec4:	7b7b      	ldrb	r3, [r7, #13]
 8005ec6:	2bff      	cmp	r3, #255	@ 0xff
 8005ec8:	d01f      	beq.n	8005f0a <USBD_StdEPReq+0x1c6>
 8005eca:	7b7b      	ldrb	r3, [r7, #13]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11c      	bne.n	8005f0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ed0:	7b7a      	ldrb	r2, [r7, #13]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ed8:	7b7a      	ldrb	r2, [r7, #13]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	32ae      	adds	r2, #174	@ 0xae
 8005ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d010      	beq.n	8005f0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ee8:	7b7a      	ldrb	r2, [r7, #13]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	32ae      	adds	r2, #174	@ 0xae
 8005eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	4798      	blx	r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005efe:	e004      	b.n	8005f0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fc03 	bl	800670e <USBD_CtlError>
              break;
 8005f08:	e000      	b.n	8005f0c <USBD_StdEPReq+0x1c8>
              break;
 8005f0a:	bf00      	nop
          }
          break;
 8005f0c:	e0ab      	b.n	8006066 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d002      	beq.n	8005f20 <USBD_StdEPReq+0x1dc>
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d032      	beq.n	8005f84 <USBD_StdEPReq+0x240>
 8005f1e:	e097      	b.n	8006050 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <USBD_StdEPReq+0x1f2>
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	2b80      	cmp	r3, #128	@ 0x80
 8005f2a:	d004      	beq.n	8005f36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fbed 	bl	800670e <USBD_CtlError>
                break;
 8005f34:	e091      	b.n	800605a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da0b      	bge.n	8005f56 <USBD_StdEPReq+0x212>
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	e00b      	b.n	8005f6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fc43 	bl	8006808 <USBD_CtlSendData>
              break;
 8005f82:	e06a      	b.n	800605a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da11      	bge.n	8005fb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	f003 020f 	and.w	r2, r3, #15
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3324      	adds	r3, #36	@ 0x24
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d117      	bne.n	8005fd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fbb0 	bl	800670e <USBD_CtlError>
                  break;
 8005fae:	e054      	b.n	800605a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	f003 020f 	and.w	r2, r3, #15
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fb9d 	bl	800670e <USBD_CtlError>
                  break;
 8005fd4:	e041      	b.n	800605a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	da0b      	bge.n	8005ff6 <USBD_StdEPReq+0x2b2>
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	3310      	adds	r3, #16
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	e00b      	b.n	800600e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	4413      	add	r3, r2
 800600c:	3304      	adds	r3, #4
 800600e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <USBD_StdEPReq+0x2d8>
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b80      	cmp	r3, #128	@ 0x80
 800601a:	d103      	bne.n	8006024 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e00e      	b.n	8006042 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 f8c7 	bl	80071bc <USBD_LL_IsStallEP>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e002      	b.n	8006042 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2202      	movs	r2, #2
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fbdd 	bl	8006808 <USBD_CtlSendData>
              break;
 800604e:	e004      	b.n	800605a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fb5b 	bl	800670e <USBD_CtlError>
              break;
 8006058:	bf00      	nop
          }
          break;
 800605a:	e004      	b.n	8006066 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fb55 	bl	800670e <USBD_CtlError>
          break;
 8006064:	bf00      	nop
      }
      break;
 8006066:	e005      	b.n	8006074 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fb4f 	bl	800670e <USBD_CtlError>
      break;
 8006070:	e000      	b.n	8006074 <USBD_StdEPReq+0x330>
      break;
 8006072:	bf00      	nop
  }

  return ret;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	f200 8128 	bhi.w	80062f6 <USBD_GetDescriptor+0x276>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <USBD_GetDescriptor+0x2c>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060e1 	.word	0x080060e1
 80060b4:	08006121 	.word	0x08006121
 80060b8:	080062f7 	.word	0x080062f7
 80060bc:	080062f7 	.word	0x080062f7
 80060c0:	08006297 	.word	0x08006297
 80060c4:	080062c3 	.word	0x080062c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	7c12      	ldrb	r2, [r2, #16]
 80060d4:	f107 0108 	add.w	r1, r7, #8
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
 80060dc:	60f8      	str	r0, [r7, #12]
      break;
 80060de:	e112      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7c1b      	ldrb	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10d      	bne.n	8006104 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	f107 0208 	add.w	r2, r7, #8
 80060f4:	4610      	mov	r0, r2
 80060f6:	4798      	blx	r3
 80060f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	2202      	movs	r2, #2
 8006100:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006102:	e100      	b.n	8006306 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	f107 0208 	add.w	r2, r7, #8
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
 8006114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	2202      	movs	r2, #2
 800611c:	701a      	strb	r2, [r3, #0]
      break;
 800611e:	e0f2      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	885b      	ldrh	r3, [r3, #2]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b05      	cmp	r3, #5
 8006128:	f200 80ac 	bhi.w	8006284 <USBD_GetDescriptor+0x204>
 800612c:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <USBD_GetDescriptor+0xb4>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	0800614d 	.word	0x0800614d
 8006138:	08006181 	.word	0x08006181
 800613c:	080061b5 	.word	0x080061b5
 8006140:	080061e9 	.word	0x080061e9
 8006144:	0800621d 	.word	0x0800621d
 8006148:	08006251 	.word	0x08006251
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e091      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 facb 	bl	800670e <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e089      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061a2:	e077      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fab1 	bl	800670e <USBD_CtlError>
            err++;
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	3301      	adds	r3, #1
 80061b0:	72fb      	strb	r3, [r7, #11]
          break;
 80061b2:	e06f      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	7c12      	ldrb	r2, [r2, #16]
 80061cc:	f107 0108 	add.w	r1, r7, #8
 80061d0:	4610      	mov	r0, r2
 80061d2:	4798      	blx	r3
 80061d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061d6:	e05d      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa97 	bl	800670e <USBD_CtlError>
            err++;
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	3301      	adds	r3, #1
 80061e4:	72fb      	strb	r3, [r7, #11]
          break;
 80061e6:	e055      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	7c12      	ldrb	r2, [r2, #16]
 8006200:	f107 0108 	add.w	r1, r7, #8
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800620a:	e043      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fa7d 	bl	800670e <USBD_CtlError>
            err++;
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	3301      	adds	r3, #1
 8006218:	72fb      	strb	r3, [r7, #11]
          break;
 800621a:	e03b      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	7c12      	ldrb	r2, [r2, #16]
 8006234:	f107 0108 	add.w	r1, r7, #8
 8006238:	4610      	mov	r0, r2
 800623a:	4798      	blx	r3
 800623c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800623e:	e029      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa63 	bl	800670e <USBD_CtlError>
            err++;
 8006248:	7afb      	ldrb	r3, [r7, #11]
 800624a:	3301      	adds	r3, #1
 800624c:	72fb      	strb	r3, [r7, #11]
          break;
 800624e:	e021      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	7c12      	ldrb	r2, [r2, #16]
 8006268:	f107 0108 	add.w	r1, r7, #8
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
 8006270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006272:	e00f      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa49 	bl	800670e <USBD_CtlError>
            err++;
 800627c:	7afb      	ldrb	r3, [r7, #11]
 800627e:	3301      	adds	r3, #1
 8006280:	72fb      	strb	r3, [r7, #11]
          break;
 8006282:	e007      	b.n	8006294 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa41 	bl	800670e <USBD_CtlError>
          err++;
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	3301      	adds	r3, #1
 8006290:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006292:	bf00      	nop
      }
      break;
 8006294:	e037      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7c1b      	ldrb	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a6:	f107 0208 	add.w	r2, r7, #8
 80062aa:	4610      	mov	r0, r2
 80062ac:	4798      	blx	r3
 80062ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062b0:	e029      	b.n	8006306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fa2a 	bl	800670e <USBD_CtlError>
        err++;
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	3301      	adds	r3, #1
 80062be:	72fb      	strb	r3, [r7, #11]
      break;
 80062c0:	e021      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	7c1b      	ldrb	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10d      	bne.n	80062e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d2:	f107 0208 	add.w	r2, r7, #8
 80062d6:	4610      	mov	r0, r2
 80062d8:	4798      	blx	r3
 80062da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	2207      	movs	r2, #7
 80062e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062e4:	e00f      	b.n	8006306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fa10 	bl	800670e <USBD_CtlError>
        err++;
 80062ee:	7afb      	ldrb	r3, [r7, #11]
 80062f0:	3301      	adds	r3, #1
 80062f2:	72fb      	strb	r3, [r7, #11]
      break;
 80062f4:	e007      	b.n	8006306 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa08 	bl	800670e <USBD_CtlError>
      err++;
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	3301      	adds	r3, #1
 8006302:	72fb      	strb	r3, [r7, #11]
      break;
 8006304:	bf00      	nop
  }

  if (err != 0U)
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11e      	bne.n	800634a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	88db      	ldrh	r3, [r3, #6]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d016      	beq.n	8006342 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006314:	893b      	ldrh	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00e      	beq.n	8006338 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88da      	ldrh	r2, [r3, #6]
 800631e:	893b      	ldrh	r3, [r7, #8]
 8006320:	4293      	cmp	r3, r2
 8006322:	bf28      	it	cs
 8006324:	4613      	movcs	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800632a:	893b      	ldrh	r3, [r7, #8]
 800632c:	461a      	mov	r2, r3
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa69 	bl	8006808 <USBD_CtlSendData>
 8006336:	e009      	b.n	800634c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f9e7 	bl	800670e <USBD_CtlError>
 8006340:	e004      	b.n	800634c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 faba 	bl	80068bc <USBD_CtlSendStatus>
 8006348:	e000      	b.n	800634c <USBD_GetDescriptor+0x2cc>
    return;
 800634a:	bf00      	nop
  }
}
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop

08006354 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	889b      	ldrh	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d131      	bne.n	80063ca <USBD_SetAddress+0x76>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	88db      	ldrh	r3, [r3, #6]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d12d      	bne.n	80063ca <USBD_SetAddress+0x76>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	885b      	ldrh	r3, [r3, #2]
 8006372:	2b7f      	cmp	r3, #127	@ 0x7f
 8006374:	d829      	bhi.n	80063ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	885b      	ldrh	r3, [r3, #2]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b03      	cmp	r3, #3
 800638c:	d104      	bne.n	8006398 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f9bc 	bl	800670e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006396:	e01d      	b.n	80063d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 ff35 	bl	8007214 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa86 	bl	80068bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063be:	e009      	b.n	80063d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c8:	e004      	b.n	80063d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f99e 	bl	800670e <USBD_CtlError>
  }
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	4b4e      	ldr	r3, [pc, #312]	@ (800652c <USBD_SetConfig+0x150>)
 80063f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063f4:	4b4d      	ldr	r3, [pc, #308]	@ (800652c <USBD_SetConfig+0x150>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d905      	bls.n	8006408 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f985 	bl	800670e <USBD_CtlError>
    return USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	e08c      	b.n	8006522 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d002      	beq.n	800641a <USBD_SetConfig+0x3e>
 8006414:	2b03      	cmp	r3, #3
 8006416:	d029      	beq.n	800646c <USBD_SetConfig+0x90>
 8006418:	e075      	b.n	8006506 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800641a:	4b44      	ldr	r3, [pc, #272]	@ (800652c <USBD_SetConfig+0x150>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d020      	beq.n	8006464 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006422:	4b42      	ldr	r3, [pc, #264]	@ (800652c <USBD_SetConfig+0x150>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800642c:	4b3f      	ldr	r3, [pc, #252]	@ (800652c <USBD_SetConfig+0x150>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fe ffe3 	bl	80053fe <USBD_SetClassConfig>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f962 	bl	800670e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006452:	e065      	b.n	8006520 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa31 	bl	80068bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2203      	movs	r2, #3
 800645e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006462:	e05d      	b.n	8006520 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa29 	bl	80068bc <USBD_CtlSendStatus>
      break;
 800646a:	e059      	b.n	8006520 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800646c:	4b2f      	ldr	r3, [pc, #188]	@ (800652c <USBD_SetConfig+0x150>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d112      	bne.n	800649a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800647c:	4b2b      	ldr	r3, [pc, #172]	@ (800652c <USBD_SetConfig+0x150>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006486:	4b29      	ldr	r3, [pc, #164]	@ (800652c <USBD_SetConfig+0x150>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fe ffd2 	bl	8005436 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa12 	bl	80068bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006498:	e042      	b.n	8006520 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800649a:	4b24      	ldr	r3, [pc, #144]	@ (800652c <USBD_SetConfig+0x150>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d02a      	beq.n	80064fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fe ffc0 	bl	8005436 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064b6:	4b1d      	ldr	r3, [pc, #116]	@ (800652c <USBD_SetConfig+0x150>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064c0:	4b1a      	ldr	r3, [pc, #104]	@ (800652c <USBD_SetConfig+0x150>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fe ff99 	bl	80053fe <USBD_SetClassConfig>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00f      	beq.n	80064f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f918 	bl	800670e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fe ffa5 	bl	8005436 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80064f4:	e014      	b.n	8006520 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9e0 	bl	80068bc <USBD_CtlSendStatus>
      break;
 80064fc:	e010      	b.n	8006520 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9dc 	bl	80068bc <USBD_CtlSendStatus>
      break;
 8006504:	e00c      	b.n	8006520 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f900 	bl	800670e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800650e:	4b07      	ldr	r3, [pc, #28]	@ (800652c <USBD_SetConfig+0x150>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fe ff8e 	bl	8005436 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800651a:	2303      	movs	r3, #3
 800651c:	73fb      	strb	r3, [r7, #15]
      break;
 800651e:	bf00      	nop
  }

  return ret;
 8006520:	7bfb      	ldrb	r3, [r7, #15]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000238 	.word	0x20000238

08006530 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	88db      	ldrh	r3, [r3, #6]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d004      	beq.n	800654c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f8e2 	bl	800670e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800654a:	e023      	b.n	8006594 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	dc02      	bgt.n	800655e <USBD_GetConfig+0x2e>
 8006558:	2b00      	cmp	r3, #0
 800655a:	dc03      	bgt.n	8006564 <USBD_GetConfig+0x34>
 800655c:	e015      	b.n	800658a <USBD_GetConfig+0x5a>
 800655e:	2b03      	cmp	r3, #3
 8006560:	d00b      	beq.n	800657a <USBD_GetConfig+0x4a>
 8006562:	e012      	b.n	800658a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3308      	adds	r3, #8
 800656e:	2201      	movs	r2, #1
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f948 	bl	8006808 <USBD_CtlSendData>
        break;
 8006578:	e00c      	b.n	8006594 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3304      	adds	r3, #4
 800657e:	2201      	movs	r2, #1
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f940 	bl	8006808 <USBD_CtlSendData>
        break;
 8006588:	e004      	b.n	8006594 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f8be 	bl	800670e <USBD_CtlError>
        break;
 8006592:	bf00      	nop
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d81e      	bhi.n	80065f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88db      	ldrh	r3, [r3, #6]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d004      	beq.n	80065c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f8a5 	bl	800670e <USBD_CtlError>
        break;
 80065c4:	e01a      	b.n	80065fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f043 0202 	orr.w	r2, r3, #2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	330c      	adds	r3, #12
 80065e6:	2202      	movs	r2, #2
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f90c 	bl	8006808 <USBD_CtlSendData>
      break;
 80065f0:	e004      	b.n	80065fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f88a 	bl	800670e <USBD_CtlError>
      break;
 80065fa:	bf00      	nop
  }
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	885b      	ldrh	r3, [r3, #2]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d107      	bne.n	8006626 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f94c 	bl	80068bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006624:	e013      	b.n	800664e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	885b      	ldrh	r3, [r3, #2]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d10b      	bne.n	8006646 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	889b      	ldrh	r3, [r3, #4]
 8006632:	0a1b      	lsrs	r3, r3, #8
 8006634:	b29b      	uxth	r3, r3
 8006636:	b2da      	uxtb	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f93c 	bl	80068bc <USBD_CtlSendStatus>
}
 8006644:	e003      	b.n	800664e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f860 	bl	800670e <USBD_CtlError>
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006666:	b2db      	uxtb	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	2b02      	cmp	r3, #2
 800666c:	d80b      	bhi.n	8006686 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	885b      	ldrh	r3, [r3, #2]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10c      	bne.n	8006690 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f91c 	bl	80068bc <USBD_CtlSendStatus>
      }
      break;
 8006684:	e004      	b.n	8006690 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f840 	bl	800670e <USBD_CtlError>
      break;
 800668e:	e000      	b.n	8006692 <USBD_ClrFeature+0x3c>
      break;
 8006690:	bf00      	nop
  }
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fa40 	bl	8005b4a <SWAPBYTE>
 80066ca:	4603      	mov	r3, r0
 80066cc:	461a      	mov	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff fa33 	bl	8005b4a <SWAPBYTE>
 80066e4:	4603      	mov	r3, r0
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fa26 	bl	8005b4a <SWAPBYTE>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	80da      	strh	r2, [r3, #6]
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006718:	2180      	movs	r1, #128	@ 0x80
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fd10 	bl	8007140 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006720:	2100      	movs	r1, #0
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fd0c 	bl	8007140 <USBD_LL_StallEP>
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d042      	beq.n	80067cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f000 f842 	bl	80067d4 <USBD_GetLen>
 8006750:	4603      	mov	r3, r0
 8006752:	3301      	adds	r3, #1
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800675a:	d808      	bhi.n	800676e <USBD_GetString+0x3e>
 800675c:	6938      	ldr	r0, [r7, #16]
 800675e:	f000 f839 	bl	80067d4 <USBD_GetLen>
 8006762:	4603      	mov	r3, r0
 8006764:	3301      	adds	r3, #1
 8006766:	b29b      	uxth	r3, r3
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	e001      	b.n	8006772 <USBD_GetString+0x42>
 800676e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	4413      	add	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	7812      	ldrb	r2, [r2, #0]
 8006780:	701a      	strb	r2, [r3, #0]
  idx++;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	3301      	adds	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4413      	add	r3, r2
 800678e:	2203      	movs	r2, #3
 8006790:	701a      	strb	r2, [r3, #0]
  idx++;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	3301      	adds	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006798:	e013      	b.n	80067c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	4413      	add	r3, r2
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	3301      	adds	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]
    idx++;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	3301      	adds	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	4413      	add	r3, r2
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	3301      	adds	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e7      	bne.n	800679a <USBD_GetString+0x6a>
 80067ca:	e000      	b.n	80067ce <USBD_GetString+0x9e>
    return;
 80067cc:	bf00      	nop
  }
}
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80067e4:	e005      	b.n	80067f2 <USBD_GetLen+0x1e>
  {
    len++;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	3301      	adds	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f5      	bne.n	80067e6 <USBD_GetLen+0x12>
  }

  return len;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2202      	movs	r2, #2
 8006818:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	2100      	movs	r1, #0
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fd0f 	bl	8007252 <USBD_LL_Transmit>

  return USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	2100      	movs	r1, #0
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fcfe 	bl	8007252 <USBD_LL_Transmit>

  return USBD_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2203      	movs	r2, #3
 8006870:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	2100      	movs	r1, #0
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fd02 	bl	8007294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	2100      	movs	r1, #0
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fcf1 	bl	8007294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2204      	movs	r2, #4
 80068c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068cc:	2300      	movs	r3, #0
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fcbd 	bl	8007252 <USBD_LL_Transmit>

  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2205      	movs	r2, #5
 80068ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068f2:	2300      	movs	r3, #0
 80068f4:	2200      	movs	r2, #0
 80068f6:	2100      	movs	r1, #0
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fccb 	bl	8007294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800690c:	2200      	movs	r2, #0
 800690e:	4912      	ldr	r1, [pc, #72]	@ (8006958 <MX_USB_DEVICE_Init+0x50>)
 8006910:	4812      	ldr	r0, [pc, #72]	@ (800695c <MX_USB_DEVICE_Init+0x54>)
 8006912:	f7fe fcf7 	bl	8005304 <USBD_Init>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800691c:	f7f9 fef2 	bl	8000704 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006920:	490f      	ldr	r1, [pc, #60]	@ (8006960 <MX_USB_DEVICE_Init+0x58>)
 8006922:	480e      	ldr	r0, [pc, #56]	@ (800695c <MX_USB_DEVICE_Init+0x54>)
 8006924:	f7fe fd1e 	bl	8005364 <USBD_RegisterClass>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800692e:	f7f9 fee9 	bl	8000704 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006932:	490c      	ldr	r1, [pc, #48]	@ (8006964 <MX_USB_DEVICE_Init+0x5c>)
 8006934:	4809      	ldr	r0, [pc, #36]	@ (800695c <MX_USB_DEVICE_Init+0x54>)
 8006936:	f7fe fc55 	bl	80051e4 <USBD_CDC_RegisterInterface>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006940:	f7f9 fee0 	bl	8000704 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006944:	4805      	ldr	r0, [pc, #20]	@ (800695c <MX_USB_DEVICE_Init+0x54>)
 8006946:	f7fe fd43 	bl	80053d0 <USBD_Start>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006950:	f7f9 fed8 	bl	8000704 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006954:	bf00      	nop
 8006956:	bd80      	pop	{r7, pc}
 8006958:	200000b4 	.word	0x200000b4
 800695c:	2000023c 	.word	0x2000023c
 8006960:	20000018 	.word	0x20000018
 8006964:	200000a0 	.word	0x200000a0

08006968 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800696c:	2200      	movs	r2, #0
 800696e:	4905      	ldr	r1, [pc, #20]	@ (8006984 <CDC_Init_FS+0x1c>)
 8006970:	4805      	ldr	r0, [pc, #20]	@ (8006988 <CDC_Init_FS+0x20>)
 8006972:	f7fe fc51 	bl	8005218 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006976:	4905      	ldr	r1, [pc, #20]	@ (800698c <CDC_Init_FS+0x24>)
 8006978:	4803      	ldr	r0, [pc, #12]	@ (8006988 <CDC_Init_FS+0x20>)
 800697a:	f7fe fc6f 	bl	800525c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800697e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000d18 	.word	0x20000d18
 8006988:	2000023c 	.word	0x2000023c
 800698c:	20000518 	.word	0x20000518

08006990 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006994:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006996:	4618      	mov	r0, r3
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	6039      	str	r1, [r7, #0]
 80069aa:	71fb      	strb	r3, [r7, #7]
 80069ac:	4613      	mov	r3, r2
 80069ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	2b23      	cmp	r3, #35	@ 0x23
 80069b4:	f200 8098 	bhi.w	8006ae8 <CDC_Control_FS+0x148>
 80069b8:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <CDC_Control_FS+0x20>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	08006ae9 	.word	0x08006ae9
 80069c4:	08006ae9 	.word	0x08006ae9
 80069c8:	08006ae9 	.word	0x08006ae9
 80069cc:	08006ae9 	.word	0x08006ae9
 80069d0:	08006ae9 	.word	0x08006ae9
 80069d4:	08006ae9 	.word	0x08006ae9
 80069d8:	08006ae9 	.word	0x08006ae9
 80069dc:	08006ae9 	.word	0x08006ae9
 80069e0:	08006ae9 	.word	0x08006ae9
 80069e4:	08006ae9 	.word	0x08006ae9
 80069e8:	08006ae9 	.word	0x08006ae9
 80069ec:	08006ae9 	.word	0x08006ae9
 80069f0:	08006ae9 	.word	0x08006ae9
 80069f4:	08006ae9 	.word	0x08006ae9
 80069f8:	08006ae9 	.word	0x08006ae9
 80069fc:	08006ae9 	.word	0x08006ae9
 8006a00:	08006ae9 	.word	0x08006ae9
 8006a04:	08006ae9 	.word	0x08006ae9
 8006a08:	08006ae9 	.word	0x08006ae9
 8006a0c:	08006ae9 	.word	0x08006ae9
 8006a10:	08006ae9 	.word	0x08006ae9
 8006a14:	08006ae9 	.word	0x08006ae9
 8006a18:	08006ae9 	.word	0x08006ae9
 8006a1c:	08006ae9 	.word	0x08006ae9
 8006a20:	08006ae9 	.word	0x08006ae9
 8006a24:	08006ae9 	.word	0x08006ae9
 8006a28:	08006ae9 	.word	0x08006ae9
 8006a2c:	08006ae9 	.word	0x08006ae9
 8006a30:	08006ae9 	.word	0x08006ae9
 8006a34:	08006ae9 	.word	0x08006ae9
 8006a38:	08006ae9 	.word	0x08006ae9
 8006a3c:	08006ae9 	.word	0x08006ae9
 8006a40:	08006a51 	.word	0x08006a51
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006ae9 	.word	0x08006ae9
 8006a4c:	08006ae9 	.word	0x08006ae9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	3302      	adds	r3, #2
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	041b      	lsls	r3, r3, #16
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	3303      	adds	r3, #3
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	061b      	lsls	r3, r3, #24
 8006a72:	4313      	orrs	r3, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	4b20      	ldr	r3, [pc, #128]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006a78:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	791a      	ldrb	r2, [r3, #4]
 8006a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006a80:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	795a      	ldrb	r2, [r3, #5]
 8006a86:	4b1c      	ldr	r3, [pc, #112]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006a88:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	799a      	ldrb	r2, [r3, #6]
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006a90:	719a      	strb	r2, [r3, #6]
    break;
 8006a92:	e02a      	b.n	8006aea <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8006a94:	4b18      	ldr	r3, [pc, #96]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8006a9e:	4b16      	ldr	r3, [pc, #88]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	0a1a      	lsrs	r2, r3, #8
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8006aac:	4b12      	ldr	r3, [pc, #72]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	0c1a      	lsrs	r2, r3, #16
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 8006aba:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	0e1a      	lsrs	r2, r3, #24
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	3303      	adds	r3, #3
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4a0a      	ldr	r2, [pc, #40]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006ace:	7912      	ldrb	r2, [r2, #4]
 8006ad0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	3305      	adds	r3, #5
 8006ad6:	4a08      	ldr	r2, [pc, #32]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006ad8:	7952      	ldrb	r2, [r2, #5]
 8006ada:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	3306      	adds	r3, #6
 8006ae0:	4a05      	ldr	r2, [pc, #20]	@ (8006af8 <CDC_Control_FS+0x158>)
 8006ae2:	7992      	ldrb	r2, [r2, #6]
 8006ae4:	701a      	strb	r2, [r3, #0]
    break;
 8006ae6:	e000      	b.n	8006aea <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ae8:	bf00      	nop
  }

  return (USBD_OK);
 8006aea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000098 	.word	0x20000098

08006afc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_RXCallback(Buf, Len);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7f9 fd61 	bl	80005d0 <USB_RXCallback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4805      	ldr	r0, [pc, #20]	@ (8006b28 <CDC_Receive_FS+0x2c>)
 8006b12:	f7fe fba3 	bl	800525c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b16:	4804      	ldr	r0, [pc, #16]	@ (8006b28 <CDC_Receive_FS+0x2c>)
 8006b18:	f7fe fbbe 	bl	8005298 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006b1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	2000023c 	.word	0x2000023c

08006b2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	6039      	str	r1, [r7, #0]
 8006b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2212      	movs	r2, #18
 8006b60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b62:	4b03      	ldr	r3, [pc, #12]	@ (8006b70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	200000d0 	.word	0x200000d0

08006b74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	6039      	str	r1, [r7, #0]
 8006b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2204      	movs	r2, #4
 8006b84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b86:	4b03      	ldr	r3, [pc, #12]	@ (8006b94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	200000e4 	.word	0x200000e4

08006b98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	6039      	str	r1, [r7, #0]
 8006ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	4907      	ldr	r1, [pc, #28]	@ (8006bcc <USBD_FS_ProductStrDescriptor+0x34>)
 8006bae:	4808      	ldr	r0, [pc, #32]	@ (8006bd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bb0:	f7ff fdbe 	bl	8006730 <USBD_GetString>
 8006bb4:	e004      	b.n	8006bc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	4904      	ldr	r1, [pc, #16]	@ (8006bcc <USBD_FS_ProductStrDescriptor+0x34>)
 8006bba:	4805      	ldr	r0, [pc, #20]	@ (8006bd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bbc:	f7ff fdb8 	bl	8006730 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bc0:	4b02      	ldr	r3, [pc, #8]	@ (8006bcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20001518 	.word	0x20001518
 8006bd0:	08007410 	.word	0x08007410

08006bd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	6039      	str	r1, [r7, #0]
 8006bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	4904      	ldr	r1, [pc, #16]	@ (8006bf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006be4:	4804      	ldr	r0, [pc, #16]	@ (8006bf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006be6:	f7ff fda3 	bl	8006730 <USBD_GetString>
  return USBD_StrDesc;
 8006bea:	4b02      	ldr	r3, [pc, #8]	@ (8006bf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20001518 	.word	0x20001518
 8006bf8:	08007428 	.word	0x08007428

08006bfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4603      	mov	r3, r0
 8006c04:	6039      	str	r1, [r7, #0]
 8006c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	221a      	movs	r2, #26
 8006c0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c0e:	f000 f843 	bl	8006c98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c12:	4b02      	ldr	r3, [pc, #8]	@ (8006c1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	200000e8 	.word	0x200000e8

08006c20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	6039      	str	r1, [r7, #0]
 8006c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	4907      	ldr	r1, [pc, #28]	@ (8006c54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c36:	4808      	ldr	r0, [pc, #32]	@ (8006c58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c38:	f7ff fd7a 	bl	8006730 <USBD_GetString>
 8006c3c:	e004      	b.n	8006c48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4904      	ldr	r1, [pc, #16]	@ (8006c54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c42:	4805      	ldr	r0, [pc, #20]	@ (8006c58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c44:	f7ff fd74 	bl	8006730 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c48:	4b02      	ldr	r3, [pc, #8]	@ (8006c54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20001518 	.word	0x20001518
 8006c58:	0800743c 	.word	0x0800743c

08006c5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	6039      	str	r1, [r7, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d105      	bne.n	8006c7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	4907      	ldr	r1, [pc, #28]	@ (8006c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c72:	4808      	ldr	r0, [pc, #32]	@ (8006c94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c74:	f7ff fd5c 	bl	8006730 <USBD_GetString>
 8006c78:	e004      	b.n	8006c84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	4904      	ldr	r1, [pc, #16]	@ (8006c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c7e:	4805      	ldr	r0, [pc, #20]	@ (8006c94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c80:	f7ff fd56 	bl	8006730 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c84:	4b02      	ldr	r3, [pc, #8]	@ (8006c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20001518 	.word	0x20001518
 8006c94:	08007448 	.word	0x08007448

08006c98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006cdc <Get_SerialNum+0x44>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce0 <Get_SerialNum+0x48>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006caa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce4 <Get_SerialNum+0x4c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	4909      	ldr	r1, [pc, #36]	@ (8006ce8 <Get_SerialNum+0x50>)
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f814 	bl	8006cf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cc8:	2204      	movs	r2, #4
 8006cca:	4908      	ldr	r1, [pc, #32]	@ (8006cec <Get_SerialNum+0x54>)
 8006ccc:	68b8      	ldr	r0, [r7, #8]
 8006cce:	f000 f80f 	bl	8006cf0 <IntToUnicode>
  }
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	1fff7a10 	.word	0x1fff7a10
 8006ce0:	1fff7a14 	.word	0x1fff7a14
 8006ce4:	1fff7a18 	.word	0x1fff7a18
 8006ce8:	200000ea 	.word	0x200000ea
 8006cec:	200000fa 	.word	0x200000fa

08006cf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	75fb      	strb	r3, [r7, #23]
 8006d06:	e027      	b.n	8006d58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	0f1b      	lsrs	r3, r3, #28
 8006d0c:	2b09      	cmp	r3, #9
 8006d0e:	d80b      	bhi.n	8006d28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	0f1b      	lsrs	r3, r3, #28
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	440b      	add	r3, r1
 8006d20:	3230      	adds	r2, #48	@ 0x30
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	e00a      	b.n	8006d3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	0f1b      	lsrs	r3, r3, #28
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4619      	mov	r1, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	440b      	add	r3, r1
 8006d38:	3237      	adds	r2, #55	@ 0x37
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	3301      	adds	r3, #1
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	3301      	adds	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
 8006d58:	7dfa      	ldrb	r2, [r7, #23]
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d3d3      	bcc.n	8006d08 <IntToUnicode+0x18>
  }
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	@ 0x28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	605a      	str	r2, [r3, #4]
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	60da      	str	r2, [r3, #12]
 8006d86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d90:	d13a      	bne.n	8006e08 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	4b1e      	ldr	r3, [pc, #120]	@ (8006e10 <HAL_PCD_MspInit+0xa0>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <HAL_PCD_MspInit+0xa0>)
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006da2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e10 <HAL_PCD_MspInit+0xa0>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006dae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db4:	2302      	movs	r3, #2
 8006db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006dc0:	230a      	movs	r3, #10
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dc4:	f107 0314 	add.w	r3, r7, #20
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4812      	ldr	r0, [pc, #72]	@ (8006e14 <HAL_PCD_MspInit+0xa4>)
 8006dcc:	f7f9 ffb6 	bl	8000d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e10 <HAL_PCD_MspInit+0xa0>)
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8006e10 <HAL_PCD_MspInit+0xa0>)
 8006dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dda:	6353      	str	r3, [r2, #52]	@ 0x34
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <HAL_PCD_MspInit+0xa0>)
 8006de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de4:	4a0a      	ldr	r2, [pc, #40]	@ (8006e10 <HAL_PCD_MspInit+0xa0>)
 8006de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dea:	6453      	str	r3, [r2, #68]	@ 0x44
 8006dec:	4b08      	ldr	r3, [pc, #32]	@ (8006e10 <HAL_PCD_MspInit+0xa0>)
 8006dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	2043      	movs	r0, #67	@ 0x43
 8006dfe:	f7f9 ff66 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e02:	2043      	movs	r0, #67	@ 0x43
 8006e04:	f7f9 ff7f 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e08:	bf00      	nop
 8006e0a:	3728      	adds	r7, #40	@ 0x28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40023800 	.word	0x40023800
 8006e14:	40020000 	.word	0x40020000

08006e18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f7fe fb1b 	bl	800546a <USBD_LL_SetupStage>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	4619      	mov	r1, r3
 8006e66:	f7fe fb55 	bl	8005514 <USBD_LL_DataOutStage>
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	3320      	adds	r3, #32
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f7fe fbee 	bl	800567a <USBD_LL_DataInStage>
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fd28 	bl	800590a <USBD_LL_SOF>
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	79db      	ldrb	r3, [r3, #7]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d001      	beq.n	8006eda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006ed6:	f7f9 fc15 	bl	8000704 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ee0:	7bfa      	ldrb	r2, [r7, #15]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe fccc 	bl	8005882 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fc74 	bl	80057de <USBD_LL_Reset>
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fcc7 	bl	80058a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7adb      	ldrb	r3, [r3, #11]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f34:	4b04      	ldr	r3, [pc, #16]	@ (8006f48 <HAL_PCD_SuspendCallback+0x48>)
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	4a03      	ldr	r2, [pc, #12]	@ (8006f48 <HAL_PCD_SuspendCallback+0x48>)
 8006f3a:	f043 0306 	orr.w	r3, r3, #6
 8006f3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	e000ed00 	.word	0xe000ed00

08006f4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fcbd 	bl	80058da <USBD_LL_Resume>
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f7a:	78fa      	ldrb	r2, [r7, #3]
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fd15 	bl	80059ae <USBD_LL_IsoOUTIncomplete>
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fcd1 	bl	800594a <USBD_LL_IsoINIncomplete>
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fd27 	bl	8005a12 <USBD_LL_DevConnected>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fd24 	bl	8005a28 <USBD_LL_DevDisconnected>
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d13c      	bne.n	8007072 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ff8:	4a20      	ldr	r2, [pc, #128]	@ (800707c <USBD_LL_Init+0x94>)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a1e      	ldr	r2, [pc, #120]	@ (800707c <USBD_LL_Init+0x94>)
 8007004:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007008:	4b1c      	ldr	r3, [pc, #112]	@ (800707c <USBD_LL_Init+0x94>)
 800700a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800700e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007010:	4b1a      	ldr	r3, [pc, #104]	@ (800707c <USBD_LL_Init+0x94>)
 8007012:	2204      	movs	r2, #4
 8007014:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007016:	4b19      	ldr	r3, [pc, #100]	@ (800707c <USBD_LL_Init+0x94>)
 8007018:	2202      	movs	r2, #2
 800701a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800701c:	4b17      	ldr	r3, [pc, #92]	@ (800707c <USBD_LL_Init+0x94>)
 800701e:	2200      	movs	r2, #0
 8007020:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007022:	4b16      	ldr	r3, [pc, #88]	@ (800707c <USBD_LL_Init+0x94>)
 8007024:	2202      	movs	r2, #2
 8007026:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007028:	4b14      	ldr	r3, [pc, #80]	@ (800707c <USBD_LL_Init+0x94>)
 800702a:	2200      	movs	r2, #0
 800702c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800702e:	4b13      	ldr	r3, [pc, #76]	@ (800707c <USBD_LL_Init+0x94>)
 8007030:	2200      	movs	r2, #0
 8007032:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007034:	4b11      	ldr	r3, [pc, #68]	@ (800707c <USBD_LL_Init+0x94>)
 8007036:	2200      	movs	r2, #0
 8007038:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800703a:	4b10      	ldr	r3, [pc, #64]	@ (800707c <USBD_LL_Init+0x94>)
 800703c:	2200      	movs	r2, #0
 800703e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007040:	4b0e      	ldr	r3, [pc, #56]	@ (800707c <USBD_LL_Init+0x94>)
 8007042:	2200      	movs	r2, #0
 8007044:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007046:	480d      	ldr	r0, [pc, #52]	@ (800707c <USBD_LL_Init+0x94>)
 8007048:	f7fa f815 	bl	8001076 <HAL_PCD_Init>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007052:	f7f9 fb57 	bl	8000704 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007056:	2180      	movs	r1, #128	@ 0x80
 8007058:	4808      	ldr	r0, [pc, #32]	@ (800707c <USBD_LL_Init+0x94>)
 800705a:	f7fb fa42 	bl	80024e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	2100      	movs	r1, #0
 8007062:	4806      	ldr	r0, [pc, #24]	@ (800707c <USBD_LL_Init+0x94>)
 8007064:	f7fb f9f6 	bl	8002454 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007068:	2280      	movs	r2, #128	@ 0x80
 800706a:	2101      	movs	r1, #1
 800706c:	4803      	ldr	r0, [pc, #12]	@ (800707c <USBD_LL_Init+0x94>)
 800706e:	f7fb f9f1 	bl	8002454 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20001718 	.word	0x20001718

08007080 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007096:	4618      	mov	r0, r3
 8007098:	f7fa f8fc 	bl	8001294 <HAL_PCD_Start>
 800709c:	4603      	mov	r3, r0
 800709e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f942 	bl	800732c <USBD_Get_USB_Status>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	461a      	mov	r2, r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	70fb      	strb	r3, [r7, #3]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70bb      	strb	r3, [r7, #2]
 80070cc:	4613      	mov	r3, r2
 80070ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80070de:	78bb      	ldrb	r3, [r7, #2]
 80070e0:	883a      	ldrh	r2, [r7, #0]
 80070e2:	78f9      	ldrb	r1, [r7, #3]
 80070e4:	f7fa fdd0 	bl	8001c88 <HAL_PCD_EP_Open>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 f91c 	bl	800732c <USBD_Get_USB_Status>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f7fa fe1b 	bl	8001d5c <HAL_PCD_EP_Close>
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	4618      	mov	r0, r3
 800712e:	f000 f8fd 	bl	800732c <USBD_Get_USB_Status>
 8007132:	4603      	mov	r3, r0
 8007134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007136:	7bbb      	ldrb	r3, [r7, #14]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	4611      	mov	r1, r2
 800715e:	4618      	mov	r0, r3
 8007160:	f7fa fed3 	bl	8001f0a <HAL_PCD_EP_SetStall>
 8007164:	4603      	mov	r3, r0
 8007166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f8de 	bl	800732c <USBD_Get_USB_Status>
 8007170:	4603      	mov	r3, r0
 8007172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007174:	7bbb      	ldrb	r3, [r7, #14]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007198:	78fa      	ldrb	r2, [r7, #3]
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f7fa ff17 	bl	8001fd0 <HAL_PCD_EP_ClrStall>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 f8bf 	bl	800732c <USBD_Get_USB_Status>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80071d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	da0b      	bge.n	80071f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	4613      	mov	r3, r2
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	3316      	adds	r3, #22
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	e00b      	b.n	8007208 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	4613      	mov	r3, r2
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007206:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800722e:	78fa      	ldrb	r2, [r7, #3]
 8007230:	4611      	mov	r1, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f7fa fd04 	bl	8001c40 <HAL_PCD_SetAddress>
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f874 	bl	800732c <USBD_Get_USB_Status>
 8007244:	4603      	mov	r3, r0
 8007246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007248:	7bbb      	ldrb	r3, [r7, #14]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	460b      	mov	r3, r1
 8007260:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007270:	7af9      	ldrb	r1, [r7, #11]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	f7fa fe0e 	bl	8001e96 <HAL_PCD_EP_Transmit>
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f853 	bl	800732c <USBD_Get_USB_Status>
 8007286:	4603      	mov	r3, r0
 8007288:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800728a:	7dbb      	ldrb	r3, [r7, #22]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	460b      	mov	r3, r1
 80072a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80072b2:	7af9      	ldrb	r1, [r7, #11]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	f7fa fd9a 	bl	8001df0 <HAL_PCD_EP_Receive>
 80072bc:	4603      	mov	r3, r0
 80072be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f832 	bl	800732c <USBD_Get_USB_Status>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fa fdba 	bl	8001e66 <HAL_PCD_EP_GetRxCount>
 80072f2:	4603      	mov	r3, r0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007304:	4b03      	ldr	r3, [pc, #12]	@ (8007314 <USBD_static_malloc+0x18>)
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20001bfc 	.word	0x20001bfc

08007318 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]

}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d817      	bhi.n	8007370 <USBD_Get_USB_Status+0x44>
 8007340:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <USBD_Get_USB_Status+0x1c>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	08007359 	.word	0x08007359
 800734c:	0800735f 	.word	0x0800735f
 8007350:	08007365 	.word	0x08007365
 8007354:	0800736b 	.word	0x0800736b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
    break;
 800735c:	e00b      	b.n	8007376 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800735e:	2303      	movs	r3, #3
 8007360:	73fb      	strb	r3, [r7, #15]
    break;
 8007362:	e008      	b.n	8007376 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
    break;
 8007368:	e005      	b.n	8007376 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800736a:	2303      	movs	r3, #3
 800736c:	73fb      	strb	r3, [r7, #15]
    break;
 800736e:	e002      	b.n	8007376 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007370:	2303      	movs	r3, #3
 8007372:	73fb      	strb	r3, [r7, #15]
    break;
 8007374:	bf00      	nop
  }
  return usb_status;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <memset>:
 8007384:	4402      	add	r2, r0
 8007386:	4603      	mov	r3, r0
 8007388:	4293      	cmp	r3, r2
 800738a:	d100      	bne.n	800738e <memset+0xa>
 800738c:	4770      	bx	lr
 800738e:	f803 1b01 	strb.w	r1, [r3], #1
 8007392:	e7f9      	b.n	8007388 <memset+0x4>

08007394 <__libc_init_array>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4d0d      	ldr	r5, [pc, #52]	@ (80073cc <__libc_init_array+0x38>)
 8007398:	4c0d      	ldr	r4, [pc, #52]	@ (80073d0 <__libc_init_array+0x3c>)
 800739a:	1b64      	subs	r4, r4, r5
 800739c:	10a4      	asrs	r4, r4, #2
 800739e:	2600      	movs	r6, #0
 80073a0:	42a6      	cmp	r6, r4
 80073a2:	d109      	bne.n	80073b8 <__libc_init_array+0x24>
 80073a4:	4d0b      	ldr	r5, [pc, #44]	@ (80073d4 <__libc_init_array+0x40>)
 80073a6:	4c0c      	ldr	r4, [pc, #48]	@ (80073d8 <__libc_init_array+0x44>)
 80073a8:	f000 f826 	bl	80073f8 <_init>
 80073ac:	1b64      	subs	r4, r4, r5
 80073ae:	10a4      	asrs	r4, r4, #2
 80073b0:	2600      	movs	r6, #0
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	d105      	bne.n	80073c2 <__libc_init_array+0x2e>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073bc:	4798      	blx	r3
 80073be:	3601      	adds	r6, #1
 80073c0:	e7ee      	b.n	80073a0 <__libc_init_array+0xc>
 80073c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c6:	4798      	blx	r3
 80073c8:	3601      	adds	r6, #1
 80073ca:	e7f2      	b.n	80073b2 <__libc_init_array+0x1e>
 80073cc:	08007478 	.word	0x08007478
 80073d0:	08007478 	.word	0x08007478
 80073d4:	08007478 	.word	0x08007478
 80073d8:	0800747c 	.word	0x0800747c

080073dc <memcpy>:
 80073dc:	440a      	add	r2, r1
 80073de:	4291      	cmp	r1, r2
 80073e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e4:	d100      	bne.n	80073e8 <memcpy+0xc>
 80073e6:	4770      	bx	lr
 80073e8:	b510      	push	{r4, lr}
 80073ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f2:	4291      	cmp	r1, r2
 80073f4:	d1f9      	bne.n	80073ea <memcpy+0xe>
 80073f6:	bd10      	pop	{r4, pc}

080073f8 <_init>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	bf00      	nop
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr

08007404 <_fini>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	bf00      	nop
 8007408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740a:	bc08      	pop	{r3}
 800740c:	469e      	mov	lr, r3
 800740e:	4770      	bx	lr
